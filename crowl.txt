import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.nio.file.Path;

@RestController
public class FileController {

    @Autowired
    private FileCopyService fileCopyService;

    @PostMapping("/copy-files")
    public String copyFiles(@RequestParam String sourceFilePath, @RequestParam int numberOfCopies) {
        try {
            // Запускаем асинхронный процесс копирования файлов
            fileCopyService.createCopies(Path.of(sourceFilePath), numberOfCopies);
            return "Файлы будут созданы в фоновом режиме.";
        } catch (Exception e) {
            e.printStackTrace();
            return "Произошла ошибка при создании файлов: " + e.getMessage();
        }
    }
}
copy service 
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class FileCopyService {

    private static final Logger logger = LoggerFactory.getLogger(FileCopyService.class);

    private static final Pattern FILE_NAME_PATTERN = Pattern.compile("(spr_tb_results_)(\\d{12})(\\.csv)");
    private static final SimpleDateFormat DATE_TIME_FORMATTER = new SimpleDateFormat("yyyyMMddHHmm");

    @Async
    public void createCopies(Path sourceFilePath, int numberOfCopies) throws IOException {
        File sourceFile = new File(sourceFilePath.toUri());

        Matcher matcher = FILE_NAME_PATTERN.matcher(sourceFile.getName());
        if (matcher.find()) {
            String baseName = matcher.group(1);  // "spr_tb_results_"
            String extension = matcher.group(3); // ".csv"

            for (int i = 0; i < numberOfCopies; i++) {
                Calendar calendar = new GregorianCalendar();
                calendar.add(Calendar.MINUTE, i); // Уникальная метка времени для каждого файла
                String newDateTime = DATE_TIME_FORMATTER.format(calendar.getTime());
                String newFileName = baseName + newDateTime + extension;
                File targetFile = new File("/home/rsbadin/downloads/FileStorage", newFileName);

                Files.copy(sourceFile.toPath(), targetFile.toPath());
                logger.info("Файл успешно создан: {}", targetFile.getAbsolutePath());
            }
        } else {
            logger.error("Неверный формат имени файла.");
        }
    }
}

conf 
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableAsync;

@Configuration
@EnableAsync
public class AsyncConfig {
}


app props

# Настройка пула потоков для асинхронных операций
spring.task.execution.pool.core-size=10
spring.task.execution.pool.max-size=50
spring.task.execution.pool.queue-capacity=1000

# Настройки пула соединений для базы данных
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=60000



В JMeter создайте Thread Group с начальным числом потоков, например, 10, и Ramp-Up Period — 30 секунд.
Настройте HTTP Request Sampler для отправки POST-запросов на http://localhost:8080/copy-files, добавив параметры sourceFilePath и numberOfCopies.
Добавьте Listener (например, Summary Report), чтобы отслеживать результаты тестирования.




