package ru.sberinsur.fileImporter.services;

import org.springframework.stereotype.Service;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.Map;

@Service
public class ProgressBarService {

    private final Map<String, ProgressBar> progressBars = new ConcurrentHashMap<>();

    // Инициализация прогресса
    public void startProgress(String fileName, long totalRecords, int batchSize) {
        int totalSteps = (int) Math.ceil((double) totalRecords / batchSize); // Общее количество шагов
        progressBars.put(fileName, new ProgressBar(fileName, totalSteps));
        System.out.printf("Начало импорта файла '%s' (всего шагов: %d)%n", fileName, totalSteps);
    }

    // Обновление прогресса
    public void updateProgress(String fileName, int stepsCompleted) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.update(stepsCompleted);
        }
    }

    // Завершение прогресса
    public void completeProgress(String fileName) {
        ProgressBar progressBar = progressBars.remove(fileName);
        if (progressBar != null) {
            progressBar.complete();
            System.out.println(); // Переход на новую строку
            System.out.printf("Импорт файла '%s' завершён.%n", fileName);
        }
    }

    // Внутренний класс прогресс-бара
    private static class ProgressBar {
        private final String fileName;
        private final int totalSteps;
        private final AtomicInteger completedSteps;

        public ProgressBar(String fileName, int totalSteps) {
            this.fileName = fileName;
            this.totalSteps = totalSteps;
            this.completedSteps = new AtomicInteger(0);
        }

        public synchronized void update(int steps) {
            completedSteps.addAndGet(steps);
            printProgress();
        }

        public synchronized void complete() {
            completedSteps.set(totalSteps);
            printProgress();
        }

        private void printProgress() {
            int percentage = (int) (((double) completedSteps.get() / totalSteps) * 100);
            int barWidth = 50; // Длина прогресс-бара в символах
            int filledWidth = (int) ((double) completedSteps.get() / totalSteps * barWidth);

            StringBuilder progressBar = new StringBuilder("\r");
            progressBar.append("Импорт файла '").append(fileName).append("' [");
            for (int i = 0; i < barWidth; i++) {
                if (i < filledWidth) {
                    progressBar.append("=");
                } else {
                    progressBar.append(" ");
                }
            }
            progressBar.append("] ").append(percentage).append("%");

            System.out.print(progressBar.toString());
            if (percentage == 100) {
                System.out.println(); // Добавляем перенос строки, если достигли 100%
            }
        }
    }
}
