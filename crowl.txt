private void createTableFromCsv(Path csvFilePath, String tableName, Connection connection, char delimiter) {
    //noinspection deprecation
    try (Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {

        List<String> headers = csvParser.getHeaderNames().stream()
                .flatMap(header -> splitHeader(header.trim()))
                .collect(Collectors.toList());
        headers.add("iteration_id");
        String columns = headers.stream()
                .map(header -> "\"" + header + "\" TEXT")
                .collect(Collectors.joining(", "));

        String createTableSQL = String.format("CREATE TABLE IF NOT EXISTS %s (%s)", tableName, columns);
        
        // Создаем блокировку для синхронизации
        synchronized (FileImporterService.class) {
            try (Statement statement = connection.createStatement()) {
                connection.setAutoCommit(false); // Начинаем транзакцию
                statement.execute(createTableSQL); // 285 строка
                connection.commit(); // Коммитим создание таблицы
            } catch (SQLException e) {
                connection.rollback();
                logger.error("Ошибка при создании таблицы {} из файла {}", tableName, csvFilePath.getFileName() + ExceptionFilter.displayError(e));
            } finally {
                connection.setAutoCommit(true); // Восстанавливаем автокоммит
            }
        }
    } catch (IOException | SQLException e) {
        logger.error("Ошибка при чтении csv файла {}", csvFilePath.getFileName() + ExceptionFilter.displayError(e));
    }
}
