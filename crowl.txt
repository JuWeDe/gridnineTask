@Repository
public class FileCategoryRepository {

    private final DataSource fileCategoriesDataSource;
    private Map<String, FileCategory> cache = new HashMap<>();

    public FileCategoryRepository(DataSource fileCategoriesDataSource) {
        this.fileCategoriesDataSource = fileCategoriesDataSource;
        cacheCategories(); // Загружаем кэш при создании объекта
    }

    private void cacheCategories() {
        List<FileCategory> categories = selectAllFileCategories();
        for (FileCategory category : categories) {
            cache.put(category.getNameMask() + "|" + category.getExtensions(), category);
        }
    }

    public int selectDaysToExpireByNameMask(String nameMask, String extension) {
        FileCategory category = cache.get(nameMask + "|" + extension);
        return (category != null) ? category.getDaysToExpire() : -1;
    }

    public List<FileCategory> selectAllFileCategories() {
        // Метод уже обновлен выше
    }
}





public List<FileCategory> selectAllFileCategories() {
    List<FileCategory> categories = new ArrayList<>();
    String query = "SELECT * FROM file_categories"; // Убедитесь, что это правильный запрос

    try (Connection connection = fileCategoriesDataSource.getConnection();
         PreparedStatement statement = connection.prepareStatement(query);
         ResultSet resultSet = statement.executeQuery()) {

        while (resultSet.next()) {
            FileCategory fileCategory = new FileCategory();
            fileCategory.setId(resultSet.getInt("id"));
            fileCategory.setStatus(resultSet.getString("status"));
            fileCategory.setDescription(resultSet.getString("description"));
            fileCategory.setDatabase(resultSet.getString("database"));
            fileCategory.setStartDate(resultSet.getDate("start_date"));
            fileCategory.setFinishDate(resultSet.getDate("finish_date"));
            fileCategory.setDaysToExpire(resultSet.getInt("days_to_expire"));
            fileCategory.setSeparators(resultSet.getString("separators"));
            fileCategory.setColumnsCount(resultSet.getInt("columns_count"));
            fileCategory.setNameMask(resultSet.getString("name_mask"));
            fileCategory.setExtensions(resultSet.getString("extensions"));
            fileCategory.setColumns(resultSet.getString("columns"));
            categories.add(fileCategory);
        }
    } catch (SQLException e) {
        System.err.println("Ошибка при получении категорий: " + e.getMessage());
    }
    return categories;
}

