Для изменения реализаций прогресс-бара через REST, нужно сделать следующее:

---

### 1. **Создать общий интерфейс `ProgressBarInterface`**

Все реализации прогресс-бара должны реализовывать общий интерфейс. Вот пример интерфейса:

```java
public interface ProgressBarInterface {
    void startProgress(String fileName, long totalRecords, int batchSize);
    void updateProgress(String fileName, int stepsCompleted, long totalSteps);
    void completeProgress(String fileName);
}
```

---

### 2. **Реализации прогресс-баров**
Каждый прогресс-бар должен реализовать интерфейс `ProgressBarInterface`. У тебя уже есть три варианта:
1. **ProgressBarService** (с использованием библиотеки `tongfei.ProgressBar`).
2. **AnimatedProgressBarService**.
3. **DynamicDotsProgressBarService**.

---

### 3. **Сделать сервис-обёртку для текущей реализации**

Сервис-обёртка будет хранить текущую реализацию прогресс-бара, которую можно динамически менять.

```java
import org.springframework.stereotype.Service;

@Service
public class ProgressBarManager {

    private ProgressBarInterface progressBarImplementation;

    public ProgressBarManager(ProgressBarInterface defaultImplementation) {
        this.progressBarImplementation = defaultImplementation;
    }

    public void setProgressBarImplementation(ProgressBarInterface progressBarImplementation) {
        this.progressBarImplementation = progressBarImplementation;
    }

    public ProgressBarInterface getProgressBarImplementation() {
        return this.progressBarImplementation;
    }
}
```

---

### 4. **Контроллер для смены реализации**

Контроллер позволит менять реализацию через REST-запрос. 

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/progress-bar")
public class ProgressBarController {

    private final ProgressBarManager progressBarManager;
    private final ProgressBarInterface progressBarService;
    private final ProgressBarInterface animatedProgressBarService;
    private final ProgressBarInterface dynamicDotsProgressBarService;

    @Autowired
    public ProgressBarController(
            ProgressBarManager progressBarManager,
            ProgressBarService progressBarService,
            AnimatedProgressBarService animatedProgressBarService,
            DynamicDotsProgressBarService dynamicDotsProgressBarService) {
        this.progressBarManager = progressBarManager;
        this.progressBarService = progressBarService;
        this.animatedProgressBarService = animatedProgressBarService;
        this.dynamicDotsProgressBarService = dynamicDotsProgressBarService;
    }

    @PostMapping("/set")
    public String setProgressBarImplementation(@RequestParam String implementation) {
        switch (implementation.toLowerCase()) {
            case "tongfei":
                progressBarManager.setProgressBarImplementation(progressBarService);
                break;
            case "animated":
                progressBarManager.setProgressBarImplementation(animatedProgressBarService);
                break;
            case "dynamicdots":
                progressBarManager.setProgressBarImplementation(dynamicDotsProgressBarService);
                break;
            default:
                return "Invalid implementation name. Choose from: 'tongfei', 'animated', 'dynamicdots'.";
        }
        return "Progress bar implementation changed to: " + implementation;
    }

    @GetMapping("/current")
    public String getCurrentImplementation() {
        return "Current progress bar implementation: " +
                progressBarManager.getProgressBarImplementation().getClass().getSimpleName();
    }
}
```

---

### 5. **Интеграция с методом импорта**

В методе `importCsvToDatabaseBatch` используй текущую реализацию прогресс-бара из `ProgressBarManager`:

```java
@Autowired
private ProgressBarManager progressBarManager;

private boolean importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws Exception {
    ProgressBarInterface progressBar = progressBarManager.getProgressBarImplementation();

    long totalRecords = fileIteration.getRows(); // Вычисляем количество записей
    int totalSteps = (int) Math.ceil((double) totalRecords / BATCH_SIZE); // Шаги прогресса = батчи

    progressBar.startProgress(csvFilePath.getFileName().toString(), totalRecords, BATCH_SIZE);

    try (Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {
        List<CSVRecord> records = csvParser.getRecords();
        int stepsCompleted = 0;

        for (int i = 0; i < records.size(); i++) {
            // Логика обработки и добавления батчей
            if (i % BATCH_SIZE == 0) {
                stepsCompleted++;
                progressBar.updateProgress(csvFilePath.getFileName().toString(), stepsCompleted, totalSteps);
            }
        }
        progressBar.completeProgress(csvFilePath.getFileName().toString());
    } catch (Exception e) {
        progressBar.completeProgress(csvFilePath.getFileName().toString());
        throw e; // Пробрасываем исключение дальше
    }
    return true;
}
```

---

### 6. **Примеры REST-запросов**

#### Смена реализации:
```http
POST /progress-bar/set?implementation=tongfei
POST /progress-bar/set?implementation=animated
POST /progress-bar/set?implementation=dynamicdots
```

#### Проверка текущей реализации:
```http
GET /progress-bar/current
```

---

### Что получилось:
1. **Три разных реализации прогресс-бара**: каждая реализует `ProgressBarInterface`.
2. **Смена прогресс-бара в реальном времени**: можно переключаться между реализациями без перезапуска приложения.
3. **REST API**: позволяет интегрироваться с другими сервисами и легко тестировать.

---

### Плюсы решения:
1. **Гибкость**: добавление новых реализаций требует только написания новой реализации `ProgressBarInterface`.
2. **Удобство**: REST-эндпоинты позволяют тестировать и менять реализации без изменения кода.
3. **Простота интеграции**: метод `importCsvToDatabaseBatch` остаётся неизменным, всё завязано на `ProgressBarManager`.