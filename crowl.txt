Для работы с прогресс-баром через библиотеку, вы можете использовать библиотеку **`ProgressBar`** (например, `me.tongfei:progressbar`). Это популярная библиотека для отображения прогресса в консоли.

---

### Шаги интеграции библиотеки `ProgressBar`

1. Добавьте зависимость в ваш проект:

**Для Maven:**

```xml
<dependency>
    <groupId>me.tongfei</groupId>
    <artifactId>progressbar</artifactId>
    <version>0.9.5</version>
</dependency>
```

**Для Gradle:**

```gradle
implementation 'me.tongfei:progressbar:0.9.5'
```

2. Используйте `ProgressBar` в вашем коде.

---

### Обновление `importCsvToDatabaseBatch`

Добавим прогресс-бар, который обновляется в зависимости от батчей:

```java
import me.tongfei.progressbar.ProgressBar;

private boolean importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws Exception {
    long totalRecords = countLines(csvFilePath) - 1; // Общее количество строк без заголовка
    long totalBatches = (long) Math.ceil((double) totalRecords / BATCH_SIZE); // Количество батчей

    try (ProgressBar progressBar = new ProgressBar("Импорт файла", totalBatches); // Создаем прогресс-бар
         Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {
        
        List<String> headers = csvParser.getHeaderNames().stream()
                .flatMap(header -> splitHeader(header.trim()))
                .map(header -> "\"" + header.trim() + "\"")
                .collect(Collectors.toList());
        headers.add("\"iteration_id\"");
        String insertSQL = generateInsertSQL(tableName, headers);
        int iteration_id = getIterationId(csvFilePath);

        try (PreparedStatement preparedStatement = connection.prepareStatement(insertSQL)) {
            List<CSVRecord> records = csvParser.getRecords();
            int count = 0;

            for (CSVRecord record : records) {
                for (int i = 0; i < headers.size(); i++) {
                    String value = i == headers.size() - 1 ? String.valueOf(iteration_id) : record.get(i);
                    if (!getIgnoreGaps().equals("active") && (value == null || value.trim().isEmpty())) {
                        description = "Пропуск данных";
                        return false;
                    } else {
                        if (i == headers.size() - 1) {
                            preparedStatement.setInt(i + 1, iteration_id);
                        } else {
                            preparedStatement.setString(i + 1, value);
                        }
                    }
                }
                preparedStatement.addBatch();
                count++;

                if (count % BATCH_SIZE == 0) {
                    preparedStatement.executeBatch();
                    progressBar.step(); // Обновляем прогресс-бар после выполнения батча
                }
            }
            if (count % BATCH_SIZE != 0) {
                preparedStatement.executeBatch();
                progressBar.step(); // Обновляем прогресс-бар для последнего батча
            }
        }
    } catch (Exception e) {
        String message = "importCsvToDatabaseBatch: Ошибка при batch вставке данных в бд -> ";
        log.error(ExceptionFilter.unwindMessages(message, e));
        description = ExceptionFilter.unwindMessages(message, e);
        throw new Exception(message + e.getMessage(), e);
    }
    return true;
}
```

---

### Пример отображения прогресса в консоли

При запуске кода с файлом на 20 млн строк и размером батча 10 000, прогресс-бар будет выглядеть так:

```
Импорт файла  57% [=====================>-------------] 11432/20000 (10:32)
```

Где:
- **57%** — текущий прогресс.
- **[=====================>-------------]** — визуальное отображение прогресса.
- **11432/20000** — текущий номер батча / общее количество батчей.
- **(10:32)** — расчетное оставшееся время.

---

### Примечания

1. `ProgressBar` автоматически завершает строку при достижении 100%.
2. Прогресс-бар не создает много строк в логах, так как обновляет текущее состояние на одной строке.
3. Если вы хотите логировать прогресс в файл, можно дополнительно настроить вывод через `ProgressBarBuilder`.