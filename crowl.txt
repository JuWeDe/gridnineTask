import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class FileCopyService {

    private static final Logger logger = LoggerFactory.getLogger(FileCopyService.class);

    private static final Pattern FILE_NAME_PATTERN = Pattern.compile("(spr_tb_results_)(\\d{12})(\\.csv)");
    private static final SimpleDateFormat DATE_TIME_FORMATTER = new SimpleDateFormat("yyyyMMddHHmm");
    private static final Random random = new Random();

    @Async
    public void createCopies(Path sourceFilePath, int numberOfCopies) throws IOException {
        File sourceFile = new File(sourceFilePath.toUri());

        Matcher matcher = FILE_NAME_PATTERN.matcher(sourceFile.getName());
        if (matcher.find()) {
            String baseName = matcher.group(1);  // "spr_tb_results_"
            String extension = matcher.group(3); // ".csv"

            for (int i = 0; i < numberOfCopies; i++) {
                // Генерация случайной даты и времени
                int randomYear = 2020 + random.nextInt(5); // Случайный год от 2020 до 2024
                int randomMonth = 1 + random.nextInt(12); // Случайный месяц от 1 до 12
                int randomDay = 1 + random.nextInt(getDaysInMonth(randomYear, randomMonth)); // Случайный день
                int randomHour = random.nextInt(24); // Случайный час от 0 до 23
                int randomMinute = random.nextInt(60); // Случайная минута от 0 до 59

                // Создаём объект календаря с заданной случайной датой и временем
                GregorianCalendar calendar = new GregorianCalendar(randomYear, randomMonth - 1, randomDay, randomHour, randomMinute);
                String newDateTime = DATE_TIME_FORMATTER.format(calendar.getTime());

                // Формируем уникальное имя файла
                String newFileName = baseName + newDateTime + extension;
                File targetFile = new File("/home/rsbadin/downloads/FileStorage", newFileName);

                try {
                    Files.copy(sourceFile.toPath(), targetFile.toPath());
                    logger.info("Файл успешно создан: {}", targetFile.getAbsolutePath());
                } catch (FileAlreadyExistsException e) {
                    logger.warn("Файл с именем {} уже существует. Пропускаем создание.", targetFile.getName());
                }
            }
        } else {
            logger.error("Неверный формат имени файла.");
        }
    }

    // Метод для определения количества дней в месяце для корректной генерации случайного дня
    private int getDaysInMonth(int year, int month) {
        GregorianCalendar calendar = new GregorianCalendar(year, month - 1, 1);
        return calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
    }
}
