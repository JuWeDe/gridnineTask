Вот полный код с учетом всех изменений и включением всех прогресс-баров, REST-контроллера, интерфейса и реализации. 

---

### 1. **Интерфейс ProgressBarInterface**

```java
public interface ProgressBarInterface {
    void startProgress(String fileName, long totalRecords, int batchSize);
    void updateProgress(String fileName, int stepsCompleted);
    void completeProgress(String fileName);
}
```

---

### 2. **SimpleProgressBarService**

```java
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Service("simpleProgressBar")
public class SimpleProgressBarService implements ProgressBarInterface {

    private final Map<String, ProgressBar> progressBars = new ConcurrentHashMap<>();

    @Override
    public void startProgress(String fileName, long totalRecords, int batchSize) {
        int totalSteps = (int) Math.ceil((double) totalRecords / batchSize);
        progressBars.put(fileName, new ProgressBar(totalSteps, fileName));
    }

    @Override
    public void updateProgress(String fileName, int stepsCompleted) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.update(stepsCompleted);
        }
    }

    @Override
    public void completeProgress(String fileName) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.complete();
        }
        progressBars.remove(fileName);
    }

    private static class ProgressBar {
        private final int totalSteps;
        private final String fileName;
        private int completedSteps;
        private int lastLoggedPercentage = -1;

        public ProgressBar(int totalSteps, String fileName) {
            this.totalSteps = totalSteps;
            this.fileName = fileName;
            this.completedSteps = 0;
        }

        public synchronized void update(int steps) {
            completedSteps = Math.min(completedSteps + steps, totalSteps);
            printProgress();
        }

        public synchronized void complete() {
            completedSteps = totalSteps;
            printProgress();
        }

        private void printProgress() {
            int percentage = (int) ((double) completedSteps / totalSteps * 100);
            if (percentage != lastLoggedPercentage) {
                lastLoggedPercentage = percentage;
                log.info("Прогресс импорта файла {}: {}%", fileName, percentage);
            }
        }
    }
}
```

---

### 3. **TongfeiProgressBarService**

```java
import me.tongfei.progressbar.ProgressBar;
import me.tongfei.progressbar.ProgressBarBuilder;
import me.tongfei.progressbar.ProgressBarStyle;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service("tongfeiProgressBar")
public class TongfeiProgressBarService implements ProgressBarInterface {

    private final Map<String, ProgressBar> progressBars = new ConcurrentHashMap<>();

    @Override
    public void startProgress(String fileName, long totalRecords, int batchSize) {
        int totalSteps = (int) Math.ceil((double) totalRecords / batchSize);
        ProgressBar progressBar = new ProgressBarBuilder()
                .setTaskName("Импорт " + fileName)
                .setStyle(ProgressBarStyle.ASCII)
                .setInitialMax(totalSteps)
                .build();
        progressBars.put(fileName, progressBar);
    }

    @Override
    public void updateProgress(String fileName, int stepsCompleted) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.stepTo(stepsCompleted);
        }
    }

    @Override
    public void completeProgress(String fileName) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.stepTo(progressBar.getMax());
            progressBar.close();
        }
        progressBars.remove(fileName);
    }
}
```

---

### 4. **DynamicDotsProgressBarService**

```java
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Slf4j
@Service("dynamicDotsProgressBar")
public class DynamicDotsProgressBarService implements ProgressBarInterface {

    private final Map<String, Integer> progressBars = new ConcurrentHashMap<>();

    @Override
    public void startProgress(String fileName, long totalRecords, int batchSize) {
        progressBars.put(fileName, 0);
    }

    @Override
    public void updateProgress(String fileName, int stepsCompleted) {
        int progress = progressBars.getOrDefault(fileName, 0);
        progressBars.put(fileName, stepsCompleted);
        StringBuilder dots = new StringBuilder();
        for (int i = 0; i < stepsCompleted % 10; i++) {
            dots.append(".");
        }
        log.info("Импорт файла {}: {}", fileName, dots);
    }

    @Override
    public void completeProgress(String fileName) {
        log.info("Импорт файла {} завершён.", fileName);
        progressBars.remove(fileName);
    }
}
```

---

### 5. **ProgressBarManager**

```java
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class ProgressBarManager {

    private ProgressBarInterface progressBarImplementation;

    public ProgressBarManager(@Qualifier("simpleProgressBar") ProgressBarInterface progressBarImplementation) {
        this.progressBarImplementation = progressBarImplementation;
    }

    public void setProgressBarImplementation(ProgressBarInterface progressBarImplementation) {
        this.progressBarImplementation = progressBarImplementation;
    }

    public ProgressBarInterface getProgressBarImplementation() {
        return progressBarImplementation;
    }
}
```

---

### 6. **REST Контроллер**

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/progress-bar")
public class ProgressBarController {

    @Autowired
    private ProgressBarManager progressBarManager;

    @PostMapping("/set")
    public String setProgressBarImplementation(@RequestParam String implementation) {
        switch (implementation.toLowerCase()) {
            case "simple":
                progressBarManager.setProgressBarImplementation(new SimpleProgressBarService());
                break;
            case "tongfei":
                progressBarManager.setProgressBarImplementation(new TongfeiProgressBarService());
                break;
            case "dynamicdots":
                progressBarManager.setProgressBarImplementation(new DynamicDotsProgressBarService());
                break;
            default:
                return "Invalid implementation. Choose: simple, tongfei, dynamicdots.";
        }
        return "Implementation set to " + implementation;
    }

    @GetMapping("/current")
    public String getCurrentImplementation() {
        return "Current implementation: " + progressBarManager.getProgressBarImplementation().getClass().getSimpleName();
    }
}
```

---

### 7. **Интеграция с `importCsvToDatabaseBatch`**

```java
@Autowired
private ProgressBarManager progressBarManager;

private boolean importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws Exception {
    ProgressBarInterface progressBar = progressBarManager.getProgressBarImplementation();

    long totalRecords = fileIteration.getRows();
    int totalSteps = (int) Math.ceil((double) totalRecords / BATCH_SIZE);

    progressBar.startProgress(csvFilePath.getFileName().toString(), totalRecords, BATCH_SIZE);

    try (Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {
        List<CSVRecord> records = csvParser.getRecords();
        int stepsCompleted = 0;

        for (int i = 0; i < records.size(); i++) {
            // Логика обработки
            if (i % BATCH_SIZE == 0) {
                stepsCompleted++;
                progressBar.updateProgress(csvFilePath.getFileName().toString(), stepsCompleted);
            }
        }
        progressBar.completeProgress(csvFilePath.getFileName().toString());
    } catch (Exception e) {
        progressBar.completeProgress(csvFilePath.getFileName().toString());
        throw e;
    }
    return true;
}
```

---

### Теперь у вас:

1. Три разные реализации прогресс-баров.  
2. REST API для смены реализаций без перезапуска приложения.  
3. Легко расширяемая структура для добавления новых прогресс-баров.