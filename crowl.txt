import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.nio.file.StandardCopyOption;

private void processZipFile(Path zipFilePath) {
    String zipFileName = zipFilePath.getFileName().toString();
    if (!isFileFullyUploaded(zipFilePath, 5, 2000)) {
        logger.error("Файл {} не загружен", zipFilePath.getFileName());
        moveFile(zipFilePath, Paths.get(errorDir));
        updateFileIterations(zipFilePath.getFileName(), "error", errorDir, new Timestamp(System.currentTimeMillis()));
        return;
    }

    try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(zipFilePath))) {
        ZipEntry zipEntry;
        while ((zipEntry = zis.getNextEntry()) != null) {
            // Если файл внутри архива CSV, извлекаем его
            if (zipEntry.getName().endsWith(".csv")) {
                Path extractedFile = Paths.get(sourceDir, zipEntry.getName());
                
                // Извлекаем файл
                Files.copy(zis, extractedFile, StandardCopyOption.REPLACE_EXISTING);

                // Запускаем асинхронную обработку файла CSV
                CompletableFuture.runAsync(() -> processCsvFile(extractedFile))
                        .exceptionally(ex -> {
                            logger.error("Ошибка при обработке CSV файла из архива {}", extractedFile + ExceptionFilter.displayError(ex));
                            return null;
                        });
            }
        }
    } catch (IOException e) {
        logger.error("Ошибка при распаковке архива {}: {}", zipFileName, ExceptionFilter.displayError(e));
        moveFile(zipFilePath, Paths.get(errorDir));
    }
}



watxh 

@Scheduled(fixedRate = 10000)
public void watchDirectory() {
    try {
        Path sourcePath = Paths.get(sourceDir);
        if (!Files.exists(sourcePath)) {
            logger.warn("Директория {} не существует", sourceDir);
            return;
        }

        Files.list(sourcePath)
                .filter(Files::isRegularFile)
                .forEach(filePath -> {
                    String fileName = filePath.getFileName().toString();
                    if (fileName.endsWith(".csv") && !processedFiles.contains(fileName)) {
                        logger.info("Обнаружен новый CSV файл: {}", filePath);
                        processedFiles.add(fileName);
                        CompletableFuture.runAsync(() -> processCsvFile(filePath))
                                .exceptionally(ex -> {
                                    logger.error("Ошибка при обработке файла {}", filePath + ExceptionFilter.displayError(ex));
                                    processedFiles.remove(fileName);
                                    return null;
                                });
                    } else if (fileName.endsWith(".zip") && !processedFiles.contains(fileName)) {
                        logger.info("Обнаружен новый ZIP файл: {}", filePath);
                        processedFiles.add(fileName);
                        CompletableFuture.runAsync(() -> processZipFile(filePath))
                                .exceptionally(ex -> {
                                    logger.error("Ошибка при обработке ZIP файла {}", filePath + ExceptionFilter.displayError(ex));
                                    processedFiles.remove(fileName);
                                    return null;
                                });
                    }
                });
    } catch (Exception e) {
        logger.error(ExceptionFilter.displayError(e));
    }
}
