/**
 * Метод для переноса данных из файла в таблицу в бд
 * @param csvFilePath - путь до файла
 * @param tableName - имя таблицы
 * @param connection - соединение с бд
 * @param delimiter - разделитель csv файла
 */
private void importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws IOException, SQLException {
    try (Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {

        // Разбиваем заголовки с пробелами на отдельные элементы
        List<String> headers = csvParser.getHeaderNames().stream()
                .flatMap(header -> splitHeader(header.trim()))  // Разделяем заголовки по пробелам
                .collect(Collectors.toList());

        String insertSQL = generateInsertSQL(tableName, headers);  // Используем новые заголовки для вставки
        try (PreparedStatement preparedStatement = connection.prepareStatement(insertSQL)) {
            List<CSVRecord> records = csvParser.getRecords();
            int count = 0;

            for (CSVRecord record : records) {
                int parameterIndex = 1;  // Индекс для параметров PreparedStatement
                for (String header : csvParser.getHeaderNames()) {
                    List<String> splitHeaders = splitHeader(header.trim()).collect(Collectors.toList());
                    for (String splitHeader : splitHeaders) {
                        String value = record.get(header);  // Получаем исходное значение для заголовка
                        if (value == null || value.trim().isEmpty()) {
                            preparedStatement.setNull(parameterIndex, java.sql.Types.NULL);  // Если пусто, вставляем NULL
                        } else {
                            preparedStatement.setString(parameterIndex, value);
                        }
                        parameterIndex++;  // Увеличиваем индекс для следующего параметра
                    }
                }

                preparedStatement.addBatch();
                count++;
                if (count % BATCHSIZE == 0) {
                    preparedStatement.executeBatch();
                }
            }
            preparedStatement.executeBatch();  // Выполняем оставшиеся записи
        }
    }
}

/**
 * Метод для создания таблицы на основе заголовков CSV
 * @param csvFilePath - путь до файла
 * @param tableName - имя таблицы
 * @param connection - соединение с бд
 * @param delimiter - разделитель csv файла
 */
private void createTableFromCsv(Path csvFilePath, String tableName, Connection connection, char delimiter) throws IOException, SQLException {
    try (Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {

        List<String> headers = csvParser.getHeaderNames().stream()
                .flatMap(header -> splitHeader(header.trim()))  // Разбиваем заголовки по пробелам
                .collect(Collectors.toList());

        String columns = headers.stream()
                .map(header -> "\"" + header + "\" TEXT")
                .collect(Collectors.joining(", "));

        String createTableSQL = String.format("CREATE TABLE IF NOT EXISTS %s (%s)", tableName, columns);
        try (Statement statement = connection.createStatement()) {
            statement.execute(createTableSQL);
        }
    }
}

/**
 * Метод для разделения заголовков по пробелам
 * @param header - исходный заголовок столбца
 * @return Stream с отдельными заголовками
 */
private Stream<String> splitHeader(String header) {
    // Если заголовок содержит пробелы, разбиваем его на несколько частей
    if (header.contains(" ")) {
        return Arrays.stream(header.split("\\s+"));  // Разделяем по пробелам
    }
    return Stream.of(header);  // Если нет пробелов, возвращаем исходный заголовок
}
