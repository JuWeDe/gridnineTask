Беседа № 126: 
Выбрана Ваша роль: Программист

Хорошо, вот измененная версия класса FolderCleaner, которая удаляет файлы через 10 секунд после их появления:

import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class FolderCleaner {
    private final Path watchedDirectory;
    private final ScheduledExecutorService scheduledExecutorService;
    private final Map<Path, LocalDateTime> fileCreationTimes;
    private final int expirationSeconds;

    public FolderCleaner(String directoryPath, int expirationSeconds) throws IOException {
        this.watchedDirectory = Paths.get(directoryPath);
        this.expirationSeconds = expirationSeconds;
        this.scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
        this.fileCreationTimes = new HashMap<>();

        // Регистрируем наблюдение за директорией
        watchedDirectory.register(FileSystems.getDefault().newWatchService(), StandardWatchEventKinds.ENTRY_CREATE,
                StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);
    }

    public void start() {
        new Thread(() -> {
            while (true) {
                // Ожидание изменений в директории
                WatchKey key;
                try {
                    key = FileSystems.getDefault().newWatchService().take();
                } catch (InterruptedException e) {
                    return;
                }

                // Обработка изменений
                for (WatchEvent<?> event : key.pollEvents()) {
                    WatchEvent.Kind<?> kind = event.kind();
                    Path path = watchedDirectory.resolve((Path) event.context());

                    if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
                        // Новый файл создан
                        fileCreationTimes.put(path, LocalDateTime.now());
                        scheduleFileExpiration(path);
                    } else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {
                        // Файл удален
                        fileCreationTimes.remove(path);
                    } else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {
                        // Файл изменен
                        // Можно реализовать какие-либо действия, например, обновить метку времени
                    } else if (kind == StandardWatchEventKinds.OVERFLOW) {
                        // Пропущено событие, ничего не делаем
                    }
                }

                // Сбрасываем ключ для дальнейшего использования
                boolean valid = key.reset();
                if (!valid) {
                    break;
                }
            }
        }).start();
    }

    private void scheduleFileExpiration(Path path) {
        scheduledExecutorService.schedule(() -> {
            try {
                Files.delete(path);
                System.out.println("Deleted file: " + path.getFileName());
                fileCreationTimes.remove(path);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }, expirationSeconds, TimeUnit.SECONDS);
    }
}

Основные изменения:

1. Добавлен ScheduledExecutorService для планирования удаления файлов.
2. Вместо метода checkExpiration() используется scheduleFileExpiration(), который планирует удаление файла через expirationSeconds секунд после его создания.
3. Вместо отслеживания времени создания файла, теперь используется fileCreationTimes для хранения времени создания каждого файла.

Теперь, чтобы использовать этот класс, вы можете сделать следующее:

FolderCleaner folderCleaner = new FolderCleaner("path/to/directory", 10);
folderCleaner.start();

В этом примере FolderCleaner будет наблюдать за директорией "path/to/directory" и удалять файлы через 10 секунд после их появления.

2088 из 16384