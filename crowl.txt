package ru.sberinsur.fileImporter.services;

import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class ProgressBarService {
    private final Map<String, ProgressBar> progressBars = new ConcurrentHashMap<>();

    public void startProgress(String fileName, long totalRecords, int batchSize) {
        int totalSteps = (int) Math.ceil((double) totalRecords / batchSize); // Количество шагов равно количеству батчей
        progressBars.put(fileName, new ProgressBar(fileName, totalSteps));
        System.out.printf("Начало импорта файла: %s с %d шагами (размер батча: %d)%n", fileName, totalSteps, batchSize);
    }

    public void updateProgress(String fileName, int stepsCompleted) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.update(stepsCompleted);
            progressBar.printProgress();
        }
    }

    public void completeProgress(String fileName) {
        ProgressBar progressBar = progressBars.remove(fileName);
        if (progressBar != null) {
            progressBar.complete();
            progressBar.printProgress();
            System.out.println(); // Перенос строки после завершения
            System.out.printf("Импорт файла %s завершён.%n", fileName);
        }
    }

    private static class ProgressBar {
        private final String fileName;
        private final int totalSteps;
        private int completedSteps;

        public ProgressBar(String fileName, int totalSteps) {
            this.fileName = fileName;
            this.totalSteps = totalSteps;
            this.completedSteps = 0;
        }

        public synchronized void update(int steps) {
            this.completedSteps = Math.min(this.completedSteps + steps, totalSteps);
        }

        public synchronized void printProgress() {
            int percentage = getPercentage();
            int barWidth = 50; // Длина прогресс-бара в символах
            int filledWidth = (int) ((double) completedSteps / totalSteps * barWidth);

            StringBuilder bar = new StringBuilder();
            bar.append("\rИмпорт файла ").append(fileName).append(" [");
            for (int i = 0; i < barWidth; i++) {
                if (i < filledWidth) {
                    bar.append("=");
                } else {
                    bar.append(" ");
                }
            }
            bar.append("] ").append(percentage).append("%");

            System.out.print(bar.toString());
        }

        public synchronized void complete() {
            this.completedSteps = totalSteps;
        }

        private int getPercentage() {
            return (int) ((double) completedSteps / totalSteps * 100);
        }
    }
}
