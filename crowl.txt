private boolean importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws IOException, SQLException {
    try (Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {

        List<String> headers = csvParser.getHeaderNames().stream()
                .flatMap(header -> splitHeader(header.trim()))  // Разделяем заголовки по пробелам
                .map(header -> "\"" + header.trim() + "\"") // Поддерживаем имена столбцов с #
                .collect(Collectors.toList());

        String insertSQL = generateInsertSQL(tableName, headers);

        try (PreparedStatement preparedStatement = connection.prepareStatement(insertSQL)) {
            List<CSVRecord> records = csvParser.getRecords();
            int count = 0;

            for (CSVRecord record : records) {
                // Проверка значений в строке
                for (int i = 0; i < headers.size(); i++) {
                    String value = record.get(i);
                    if (value == null || value.trim().isEmpty()) {
                        // Логируем информацию о проблемной строке и возвращаем false
                        logger.warn("Пропуск данных в строке {} в файле {}: {}", record.getRecordNumber(), csvFilePath.getFileName(), record);
                        return false; // Возвращаем сигнал об ошибке данных
                    } else {
                        preparedStatement.setString(i + 1, value);
                    }
                }

                preparedStatement.addBatch();
                count++;

                if (count % BATCH_SIZE == 0) {
                    preparedStatement.executeBatch();
                }
            }

            preparedStatement.executeBatch();
        }
    }
    return true; // Возвращаем true, если импорт прошел успешно
}



zzzz



private void processCsvFile(Path csvFilePath) {
    String fileName = csvFilePath.getFileName().toString();
    String tableName = getTableNameWithoutExtension(fileName);
    boolean isTableCreated = false;
    Connection connection = null;
    Path errorDirPath = Paths.get(errorDir);

    // Проверка, что файл был загружен полностью
    if (isFileFullyUploaded(csvFilePath, 5, 2000)) {
        logger.error("Файл {} не был загружен полностью", csvFilePath.getFileName());
        moveFile(csvFilePath, errorDirPath);
        updateFileIterations(csvFilePath.getFileName(), "error", errorDir, "Файл не был загружен полностью", new Timestamp(System.currentTimeMillis()));
        return;
    }

    try {
        connection = getConnectionBasedOnFileName(fileName);
        if (connection != null) {
            connection.setAutoCommit(false);  // Отключаем автокоммит для управления транзакцией вручную
        }

        char delimiter = detectDelimiter(csvFilePath);

        // Проверка существования таблицы
        if (!doesTableExist(connection, tableName)) {
            createTableFromCsv(csvFilePath, tableName, connection, delimiter);
            isTableCreated = true;
        }

        // Импорт данных из CSV в таблицу
        boolean isImportSuccessful = importCsvToDatabaseBatch(csvFilePath, tableName, connection, delimiter);

        if (!isImportSuccessful) {
            // Прерывание обработки из-за пропуска данных
            logger.warn("Ошибка данных: файл {} содержит пропуски и был перенесен в errorDir", fileName);
            if (connection != null) {
                connection.rollback();  // Откат транзакции
                logger.info("Откат изменений для таблицы {}", tableName);

                if (isTableCreated) {
                    dropTableIfExists(connection, tableName);  // Удаляем таблицу, если она была создана
                }
            }
            updateFileIterations(csvFilePath.getFileName(), "error", errorDir, "Пропуск данных в файле", new Timestamp(System.currentTimeMillis()));
            moveFile(csvFilePath, errorDirPath);  // Перемещаем файл в папку ошибок
            processedFiles.remove(fileName);
            return;  // Завершаем обработку файла
        }

        if (connection != null) {
            connection.commit();  // Коммит транзакции, если импорт прошел успешно
        }

        // Логирование успеха и перемещение файла
        updateFileIterations(csvFilePath.getFileName(), "success", successDir, "", new Timestamp(System.currentTimeMillis()));
        logger.info("Файл {} успешно обработан", fileName);
        moveFile(csvFilePath, Paths.get(successDir));
        processedFiles.remove(fileName);
    } catch (Exception e) {
        // Обрабатываем другие ошибки
        logger.error("Ошибка при импортировании файла {} в БД: {}", fileName, ExceptionFilter.displayError(e));
        try {
            if (connection != null) {
                connection.rollback();  // Откат изменений при общей ошибке
                logger.info("Откат изменений для таблицы {}", tableName);

                if (isTableCreated) {
                    dropTableIfExists(connection, tableName);
                }
            }
        } catch (SQLException rollbackEx) {
            logger.error("Ошибка при откате изменений для таблицы {}: {}", tableName, ExceptionFilter.displayError(rollbackEx));
        }

        // Логирование ошибки и перемещение файла в папку ошибок
        updateFileIterations(csvFilePath.getFileName(), "error", errorDir, "Ошибка обработки файла", new Timestamp(System.currentTimeMillis()));
        moveFile(csvFilePath, errorDirPath);
        processedFiles.remove(fileName);
    } finally {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                logger.error("Ошибка при закрытии соединения: {}", ExceptionFilter.displayError(e));
            }
        }
    }
}



