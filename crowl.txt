Хорошо! Давайте добавим примеры с использованием **различных библиотек**, включая как популярные, так и редкие решения. Мы создадим отдельные реализации для каждого из них, чтобы вы могли сравнить и выбрать наиболее подходящую.  

---

### **Полный список библиотек для работы с Progress Bar**
1. **[ConsoleProgressBar (me.tongfei)](https://github.com/ctongfei/progressbar)**  
2. **[JLine3](https://github.com/jline/jline3)**  
3. **[Lanterna](https://github.com/mabe02/lanterna)**  
4. **[ProgressBar4j](https://github.com/basshelal/ProgressBar4j)**  
5. **[ProgressBarz](https://github.com/seratch/progress-barz)**  
6. **Собственная реализация**  

---

### **Gradle зависимости для всех библиотек**

```groovy
dependencies {
    implementation 'me.tongfei:progressbar:0.9.5'         // ConsoleProgressBar
    implementation 'org.jline:jline:3.21.0'               // JLine3
    implementation 'com.googlecode.lanterna:lanterna:3.1.1' // Lanterna
    implementation 'com.github.basshelal:progressbar4j:1.1' // ProgressBar4j
    implementation 'com.github.seratch:progress-barz:0.3.0' // ProgressBarz
}
```

---

### **Примеры использования**

#### **1. ConsoleProgressBar (me.tongfei)**
Эта библиотека предоставляет базовый прогресс-бар для консоли.

```java
import me.tongfei.progressbar.ProgressBar;

public class ConsoleProgressBarDemo {
    public static void main(String[] args) throws InterruptedException {
        try (ProgressBar pb = new ProgressBar("Task", 100)) {
            for (int i = 0; i <= 100; i++) {
                pb.step(); // Увеличиваем прогресс на 1 шаг
                Thread.sleep(50); // Имитация работы
            }
        }
    }
}
```

---

#### **2. JLine3**
Библиотека для работы с консольным вводом/выводом.

```java
import org.jline.terminal.Terminal;
import org.jline.terminal.TerminalBuilder;

public class JLineProgressBarDemo {
    public static void main(String[] args) throws Exception {
        Terminal terminal = TerminalBuilder.terminal();
        int total = 100;
        for (int i = 0; i <= total; i++) {
            int progress = (int) ((i / (double) total) * 100);
            terminal.writer().print("\rProgress: [" + "=".repeat(progress / 2) + " ".repeat(50 - progress / 2) + "] " + progress + "%");
            terminal.flush();
            Thread.sleep(50); // Имитация работы
        }
        terminal.writer().println("\nDone!");
    }
}
```

---

#### **3. Lanterna**
Lanterna позволяет создавать более сложные текстовые интерфейсы, включая прогресс-бары.

```java
import com.googlecode.lanterna.terminal.DefaultTerminalFactory;
import com.googlecode.lanterna.terminal.Terminal;
import com.googlecode.lanterna.terminal.TerminalResizeListener;

public class LanternaProgressBarDemo {
    public static void main(String[] args) throws Exception {
        Terminal terminal = new DefaultTerminalFactory().createTerminal();
        int total = 100;
        for (int i = 0; i <= total; i++) {
            String bar = "\rProgress: [" + "=".repeat(i / 2) + " ".repeat(50 - i / 2) + "] " + i + "%";
            terminal.putString(bar);
            terminal.flush();
            Thread.sleep(50); // Имитация работы
        }
        terminal.close();
    }
}
```

---

#### **4. ProgressBar4j**
Простая, но мощная библиотека для текстового прогресса.

```java
import com.basshelal.progressbar.ProgressBar;

public class ProgressBar4jDemo {
    public static void main(String[] args) throws InterruptedException {
        ProgressBar progressBar = new ProgressBar(50); // Ширина прогресс-бара
        for (int i = 0; i <= 100; i++) {
            progressBar.update(i); // Обновляем прогресс
            Thread.sleep(50); // Имитация работы
        }
        System.out.println("\nDone!");
    }
}
```

---

#### **5. ProgressBarz**
Эта библиотека поддерживает кастомизацию (например, изменение символов и цветов).

```java
import progressbarz.ProgressBar;
import progressbarz.ProgressBarStyle;

public class ProgressBarzDemo {
    public static void main(String[] args) throws InterruptedException {
        ProgressBar pb = new ProgressBar(100, ProgressBarStyle.UNICODE_BLOCK);
        for (int i = 0; i <= 100; i++) {
            pb.stepTo(i);
            Thread.sleep(50); // Имитация работы
        }
        pb.close();
    }
}
```

---

#### **6. Собственная реализация**
Стандартный подход с использованием `System.out`.

```java
public class CustomProgressBarDemo {
    public static void main(String[] args) throws InterruptedException {
        int total = 100;
        for (int i = 0; i <= total; i++) {
            int progress = (int) ((i / (double) total) * 100);
            String bar = "\rProgress: [" + "=".repeat(progress / 2) + " ".repeat(50 - progress / 2) + "] " + progress + "%";
            System.out.print(bar);
            Thread.sleep(50); // Имитация работы
        }
        System.out.println("\nDone!");
    }
}
```

---

### **Особенности и кастомизация**
Вы можете настроить каждую библиотеку:  
- **ConsoleProgressBar:** Изменение цвета, добавление таймера.  
- **JLine:** Добавление анимации.  
- **Lanterna:** Интеграция с текстовыми интерфейсами.  
- **ProgressBar4j:** Изменение символов отображения.  
- **ProgressBarz:** Полная кастомизация (цвета, стили, формы).  

Если потребуется добавить больше примеров или настроить конкретный прогресс-бар, сообщите!