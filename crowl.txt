
=== no structures ===

package main

import (
    "fmt"
    "math"
)

func reverseNumber(n int) int {
    return (n%10)*100 + (n/10%10)*10 + n/100
}

func isRightTriangle(a, b, c int) string {
    if a*a+b*b == c*c {
        return "Прямоугольный"
    }
    return "Непрямоугольный"
}

func timeFromSeconds(k int) (int, int) {
    hours := k / 3600
    minutes := (k % 3600) / 60
    return hours, minutes
}

func main() {
    number := 843
    a, b, c := 6, 8, 10
    seconds := 13257

    // Задача 1
    reversed := reverseNumber(number)
    fmt.Printf("Перевернутое число: %d\n", reversed)

    // Задача 2
    result := isRightTriangle(a, b, c)
    fmt.Println(result)

    // Задача 3
    hours, minutes := timeFromSeconds(seconds)
    fmt.Printf("It is %d hours %d minutes.\n", hours, minutes)
}


=== added structures ===




package main

import (
    "fmt"
    "time"
)

type Triangle struct {
    A, B, C int
}

type Time struct {
    Seconds int
}

func reverseNumber(n int) int {
    return (n%10)*100 + (n/10%10)*10 + n/100
}

func (t Triangle) IsRight() string {
    switch {
    case t.A*t.A+t.B*t.B == t.C*t.C:
        return "Прямоугольный"
    default:
        return "Непрямоугольный"
    }
}

func (t Time) ToHoursMinutes() (int, int) {
    hours := t.Seconds / 3600
    minutes := (t.Seconds % 3600) / 60
    return hours, minutes
}

func main() {
    const number = 843
    triangle := Triangle{A: 6, B: 8, C: 10}
    timeData := Time{Seconds: 13257}

    // Задача 1
    reversed := reverseNumber(number)
    fmt.Printf("Перевернутое число: %d\n", reversed)

    // Задача 2
    result := triangle.IsRight()
    fmt.Println(result)

    // Задача 3
    hours, minutes := timeData.ToHoursMinutes()
    fmt.Printf("It is %d hours %d minutes.\n", hours, minutes)

    // Дополнительно: использование time.Duration
    duration := time.Duration(timeData.Seconds) * time.Second
    fmt.Printf("It is %s.\n", duration)
}