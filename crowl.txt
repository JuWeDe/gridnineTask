import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class FolderCleaner {
    private static final Logger logger = LoggerFactory.getLogger(FolderCleaner.class);

    private final Path watchedDirectory;
    private final ScheduledExecutorService scheduledExecutorService;
    private final Map<Path, LocalDateTime> fileCreationTimes;
    private final int daysToExpire;

    public FolderCleaner(String directoryPath, int daysToExpire) {
        this.watchedDirectory = Paths.get(directoryPath);
        this.daysToExpire = daysToExpire;
        this.scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
        this.fileCreationTimes = new HashMap<>();
    }

    public void start() {
        scheduledExecutorService.scheduleAtFixedRate(this::cleanExpiredFiles, 0, 1, TimeUnit.DAYS);
        logger.info("FolderCleaner started monitoring directory: {}", watchedDirectory);

        // 无限循环,确保程序不会终止
        while (true) {
            try {
                Thread.sleep(Long.MAX_VALUE);
            } catch (InterruptedException e) {
                logger.error("Interrupted exception occurred in FolderCleaner", e);
            }
        }
    }

    private void cleanExpiredFiles() {
        LocalDateTime expirationTime = LocalDateTime.now().minus(daysToExpire, ChronoUnit.DAYS);
        fileCreationTimes.entrySet().removeIf(entry -> {
            Path path = entry.getKey();
            LocalDateTime creationTime = entry.getValue();
            if (creationTime.isBefore(expirationTime)) {
                try {
                    Files.delete(path);
                    logger.info("Deleted file: {}", path.getFileName());
                    return true;
                } catch (IOException e) {
                    logger.error("Error deleting file: {}", path.getFileName(), e);
                }
            }
            return false;
        });
    }
}

在

