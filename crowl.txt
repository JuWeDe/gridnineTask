private static void crawl(String url, int depth, Set<String> visitedUrls, Path outputDir) {
        if (depth > MAX_DEPTH) {
            return;
        }

        if (!visitedUrls.add(url)) {
            return;
        }

        try {
            Document doc = Jsoup.connect(url).get();
            System.out.println("Crawling: " + url);

            String textContent = doc.body().text();
            Path textFilePath = Paths.get(outputDir.toString(), "texts", getFileName(url, ".txt"));
            Files.write(textFilePath, textContent.getBytes());

            List<Future<?>> futures = saveMediaContent(doc, outputDir);
            for (Future<?> future : futures) {
                future.get();
            }

            List<String> links = getLinks(doc);
            for (String link : links) {
                crawl(link, depth + 1, visitedUrls, outputDir);
            }
        } catch (IOException | InterruptedException e) {
            System.err.println("Error crawling " + url + ": " + e.getMessage());
        }
    }

    private static List<Future<?>> saveMediaContent(Document doc, Path outputDir) {
        List<Future<?>> futures = Lists.newArrayList();

        Elements imgElements = doc.select("img");
        futures.addAll(saveMediaFiles(imgElements, "images", outputDir));

        Elements videoElements = doc.select("video");
        futures.addAll(saveMediaFiles(videoElements, "videos", outputDir));

        return futures;
    }

    private static List<Future<?>> saveMediaFiles(Elements elements, String type, Path outputDir) {
        List<Future<?>> futures = Lists.newArrayList();
        Path typeDir = Paths.get(outputDir.toString(), type);
        Files.createDirectories(typeDir);

        for (Element element : elements) {
            String url = element.attr("src");
            String fileName = getFileName(url, "." + type);
            Path filePath = Paths.get(typeDir.toString(), fileName);
            if (!Files.exists(filePath)) {
                Future<?> future = executorService.submit(() -> {
                    try (InputStream in = new URL(url).openStream()) {
                        Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);
                        System.out.println("Downloaded " + type + ": " + filePath);
                    } catch (IOException e) {
                        System.err.println("Error downloading " + type + ": " + url);
                    }
});
futures.add(future);
            }
        }
        return futures;
    }
