import java.io.*;
import java.nio.file.*;
import java.sql.Connection;
import java.sql.Timestamp;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class FileImporterService {

    public void processFile(Path filePath) {
        String fileName = filePath.getFileName().toString();
        
        // Проверка, является ли файл zip-архивом
        if (fileName.endsWith(".zip")) {
            processZipFile(filePath);  // Если это ZIP, то разархивируем и обрабатываем CSV файлы внутри
        } else if (fileName.endsWith(".csv")) {
            processCsvFile(filePath);  // Если это обычный CSV, обрабатываем его как раньше
        } else {
            logger.error("Неподдерживаемый тип файла: {}", fileName);
        }
    }

    /**
     * Метод для обработки ZIP-файла. Извлекает и обрабатывает все CSV-файлы внутри архива.
     */
    private void processZipFile(Path zipFilePath) {
        try (ZipInputStream zipInputStream = new ZipInputStream(new BufferedInputStream(Files.newInputStream(zipFilePath)))) {
            ZipEntry entry;
            while ((entry = zipInputStream.getNextEntry()) != null) {
                if (entry.getName().endsWith(".csv")) {
                    logger.info("Обрабатываем файл {} из архива {}", entry.getName(), zipFilePath);

                    // Создаем временный файл для извлеченного CSV
                    Path tempCsvFile = Files.createTempFile("extracted_", ".csv");

                    // Сохраняем содержимое файла из архива во временный файл
                    try (OutputStream tempFileStream = Files.newOutputStream(tempCsvFile)) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = zipInputStream.read(buffer)) > 0) {
                            tempFileStream.write(buffer, 0, len);
                        }
                    }

                    // Обрабатываем извлеченный CSV файл
                    processCsvFile(tempCsvFile);

                    // После обработки удаляем временный файл
                    Files.delete(tempCsvFile);
                }
                zipInputStream.closeEntry();
            }

            logger.info("Архив {} успешно обработан", zipFilePath);
            updateFileIterations(zipFilePath.getFileName(), "success", successDir, new Timestamp(System.currentTimeMillis()));
            moveFile(zipFilePath, Paths.get(successDir));

        } catch (IOException e) {
            logger.error("Ошибка при обработке zip-файла {}", zipFilePath, e);
            updateFileIterations(zipFilePath.getFileName(), "error", errorDir, new Timestamp(System.currentTimeMillis()));
            moveFile(zipFilePath, Paths.get(errorDir));
        }
    }

    /**
     * Метод для обработки CSV файлов как раньше.
     */
    private void processCsvFile(Path csvFilePath) {
        String fileName = csvFilePath.getFileName().toString();
        String tableName = getTableNameWithoutExtension(fileName);

        try (Connection connection = getConnectionBasedOnFileName(fileName)) {
            logger.info("Импортируем файл {} в таблицу {}", fileName, tableName);

            char delimiter = detectDelimiter(csvFilePath);

            // Обрабатываем заголовки перед началом импорта
            List<String> normalizedCsvHeaders = processCsvHeaders(csvFilePath, delimiter);

            // Проверяем существование таблицы и её столбцов
            if (!doesTableExist(connection, tableName) || 
                !doesTableHaveSameColumns(normalizedCsvHeaders, tableName, connection)) {
                createTableFromCsv(csvFilePath, tableName, connection, delimiter);
            }

            // Дополняем таблицу новыми данными
            importCsvToDatabaseBatch(csvFilePath, tableName, connection, delimiter);

            logger.info("Файл {} обработан и перемещен в {}", fileName, successDir);
            updateFileIterations(csvFilePath.getFileName(), "success", successDir, new Timestamp(System.currentTimeMillis()));
            moveFile(csvFilePath, Paths.get(successDir));
            processedFiles.remove(fileName);
        } catch (Exception e) {
            logger.error("Ошибка при импортировании файла {} в бд", fileName, ExceptionFilter.displayError(e));
            updateFileIterations(csvFilePath.getFileName(), "error", errorDir, new Timestamp(System.currentTimeMillis()));
            moveFile(csvFilePath, Paths.get(errorDir));
            processedFiles.remove(fileName);
        }
    }
}
