private void processCsvFile(Path csvFilePath) {
    String fileName = csvFilePath.getFileName().toString();
    String tableName = getTableNameWithoutExtension(fileName);
    boolean isTableCreated = false;

    try (Connection connection = getConnectionBasedOnFileName(fileName)) {
        connection.setAutoCommit(false);  // Отключаем автокоммит для управления транзакцией вручную
        logger.info("Импортируем файл {} в таблицу {}", fileName, tableName);

        char delimiter = detectDelimiter(csvFilePath);

        // Проверяем существование таблицы и её столбцов
        if (!doesTableExist(connection, tableName)) {
            createTableFromCsv(csvFilePath, tableName, connection, delimiter);
            isTableCreated = true;
        } else if (!doesTableHaveSameColumns(csvFilePath, tableName, connection, delimiter)) {
            throw new SQLException("Заголовки CSV файла не соответствуют столбцам существующей таблицы.");
        }

        // Дополняем таблицу новыми данными
        importCsvToDatabaseBatch(csvFilePath, tableName, connection, delimiter);

        connection.commit();  // Коммитим транзакцию, если все успешно
        logger.info("Файл {} обработан и перемещен в {}", fileName, successDir);

        updateFileIterations(csvFilePath.getFileName(), "success", successDir, new Timestamp(System.currentTimeMillis()));
        moveFile(csvFilePath, Paths.get(successDir));
        processedFiles.remove(fileName);
    } catch (Exception e) {
        logger.error("Ошибка при импортировании файла {} в бд", fileName, ExceptionFilter.displayError(e));
        try {
            // Откат транзакции в случае ошибки
            if (isTableCreated) {
                // Удаляем таблицу только если она была создана в процессе текущего импорта
                dropTableIfExists(tableName);
            }
            Connection connection = getConnectionBasedOnFileName(fileName);  // Получаем соединение для отката
            connection.rollback();
            logger.info("Откат изменений для таблицы {}", tableName);
        } catch (SQLException rollbackEx) {
            logger.error("Ошибка при откате изменений для таблицы {}: {}", tableName, ExceptionFilter.displayError(rollbackEx));
        }

        updateFileIterations(csvFilePath.getFileName(), "error", errorDir, new Timestamp(System.currentTimeMillis()));
        moveFile(csvFilePath, Paths.get(errorDir));
        processedFiles.remove(fileName);
    }
}

/**
 * Метод для удаления таблицы
 * @param tableName - имя таблицы
 */
private void dropTableIfExists(String tableName) throws SQLException {
    String dropSQL = String.format("DROP TABLE IF EXISTS %s", tableName);
    try (Connection connection = getConnectionBasedOnFileName(tableName);
         Statement statement = connection.createStatement()) {
        statement.execute(dropSQL);
        logger.info("Таблица {} удалена", tableName);
    }
}
