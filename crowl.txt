package com.example.demo.services;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import com.example.demo.configurations.ParametersManager;

import javax.annotation.PreDestroy;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.*;
import java.sql.*;
import java.time.Duration;
import java.time.Instant;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Service
public class FileImporterService {
    private static final Logger logger = LoggerFactory.getLogger(FileImporterService.class);
    private final ParametersManager parametersManager;
    private final String sourceDir;
    private final String processedDir;
    private static final int BATCHSIZE = 1000;

    private final ExecutorService executorService;
    private final ConcurrentHashMap<String, Boolean> processingFiles; // Для отслеживания состояния файлов

    public FileImporterService(ParametersManager parametersManager,
                               @Value("${importer-properties.importerFolder}") String sourceDir,
                               @Value("${cleaner-properties.folderPath}") String processedDir) {
        this.parametersManager = parametersManager;
        this.sourceDir = sourceDir;
        this.processedDir = processedDir;
        this.executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
        this.processingFiles = new ConcurrentHashMap<>(); // Инициализация карты
    }

    @Scheduled(fixedRate = 10000)
    public void watchDirectory() {
        try {
            Path sourcePath = Paths.get(sourceDir);
            if (!Files.exists(sourcePath)) {
                logger.warn("Директория {} не существует", sourceDir);
                return;
            }

            Files.list(sourcePath)
                    .filter(Files::isRegularFile)
                    .filter(filePath -> !processingFiles.containsKey(filePath.toString())) // Фильтрация уже обработанных файлов
                    .forEach(filePath -> {
                        logger.info("Обнаружен новый файл: {}", filePath);
                        if (filePath.toString().endsWith(".csv")) {
                            processingFiles.put(filePath.toString(), true); // Отметка файла как обрабатываемого
                            CompletableFuture.runAsync(() -> processCsvFile(filePath), executorService)
                                    .exceptionally(ex -> {
                                        logger.error("Ошибка при обработке файла {}", filePath, ex);
                                        return null;
                                    })
                                    .whenComplete((result, ex) -> processingFiles.remove(filePath.toString())); // Удаляем из отслеживания после обработки
                        }
                    });
        } catch (Exception e) {
            logger.error("Ошибка при наблюдении за директорией", e);
        }
    }

    private void processCsvFile(Path csvFilePath) {
        String fileName = csvFilePath.getFileName().toString();
        String tableName = getTableNameWithoutExtension(fileName);

        try (Connection connection = getConnectionBasedOnFileName(fileName)) {
            logger.info("Импортируем файл {} в таблицу {}", fileName, tableName);

            char delimiter = detectDelimiter(csvFilePath);

            // Создание таблицы
            createTableFromCsv(csvFilePath, tableName, connection, delimiter);
            // Импорт данных в таблицу
            importCsvToDatabaseBatch(csvFilePath, tableName, connection, delimiter);
            // Перемещение файла после успешной обработки
            moveFile(csvFilePath, Paths.get(processedDir));
            logger.info("Файл {} обработан и перемещен в {}", fileName, processedDir);
        } catch (Exception e) {
            logger.error("Ошибка при обработке файла {}", fileName, e);
        }
    }

    private String getTableNameWithoutExtension(String fileName) {
        String nameWithoutExtension = fileName.substring(0, fileName.lastIndexOf("."));
        return nameWithoutExtension.replaceAll("\\d+", "");  // Удаляем цифры из имени файла
    }

    private Connection getConnectionBasedOnFileName(String fileName) throws Exception {
        String dbUrl;
        String dbUsername;
        String dbPassword;

        if (fileName.toLowerCase().contains("ois")) {
            logger.info("Файл {} будет импортирован в базу данных OIS", fileName);
            dbUrl = parametersManager.getOisDbUrl();
            dbUsername = parametersManager.getDbOisUsername();
            dbPassword = parametersManager.getDbOisPassword();
        } else {
            logger.info("Файл {} будет импортирован в базу данных CORE", fileName);
            dbUrl = parametersManager.getCoreDbUrl();
            dbUsername = parametersManager.getDbCoreUsername();
            dbPassword = parametersManager.getDbCorePassword();
        }

        return DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
    }

    private char detectDelimiter(Path csvFilePath) throws IOException {
        try (BufferedReader reader = Files.newBufferedReader(csvFilePath)) {
            String firstLine = reader.readLine();
            if (firstLine != null) {
                if (firstLine.contains(",")) {
                    return ',';
                } else if (firstLine.contains(";")) {
                    return ';';
                } else if (firstLine.contains("\t")) {
                    return '\t';
                } else {
                    throw new IllegalArgumentException("Не удалось определить разделитель для файла " + csvFilePath);
                }
            }
        }
        throw new IOException("Не удалось прочитать файл " + csvFilePath);
    }

    private void createTableFromCsv(Path csvFilePath, String tableName, Connection connection, char delimiter) throws IOException, SQLException {
        try (Reader reader = Files.newBufferedReader(csvFilePath);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {
            List<String> headers = csvParser.getHeaderNames().stream()
                    .map(header -> "\"" + header.trim().replace("#", "") + "\"")  // Удаляем # и оборачиваем в кавычки
                    .collect(Collectors.toList());
            String columns = headers.stream()
                    .map(header -> header + " TEXT")  // Для простоты все столбцы создаем как TEXT
                    .collect(Collectors.joining(", "));
            String createTableSQL = String.format("CREATE TABLE IF NOT EXISTS %s (%s)", tableName, columns);

            try (Statement statement = connection.createStatement()) {
                statement.execute(createTableSQL);
            }
        }
    }

    private void importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws IOException, SQLException {
        try (Reader reader = Files.newBufferedReader(csvFilePath);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {
            List<String> headers = csvParser.getHeaderNames().stream()
                    .map(header -> "\"" + header.trim().replace("#", "") + "\"")  // Обрабатываем имена столбцов
                    .collect(Collectors.toList());
            String insertSQL = generateInsertSQL(tableName, headers);
            try (PreparedStatement preparedStatement = connection.prepareStatement(insertSQL)) {
                List<CSVRecord> records = csvParser.getRecords();
                int count = 0;
                for (CSVRecord record : records) {
                    for (int i = 0; i < headers.size(); i++) {
                        String value = record.get(i);
                        if (value == null || value.trim().isEmpty()) {
                            preparedStatement.setNull(i + 1, java.sql.Types.NULL);  // Вставляем NULL, если значение отсутствует
                        } else {
                            preparedStatement.setString(i + 1, value);
                        }
                    }
                    preparedStatement.addBatch();
                    count++;
                    if (count % BATCHSIZE == 0) {
                        preparedStatement.executeBatch();
                    }
                }
                preparedStatement.executeBatch();  // Выполняем оставшиеся записи
            }
        }
    }

    private String generateInsertSQL(String tableName, List<String> headers) {
        String columns = headers.stream()
                .map(String::trim)
                .collect(Collectors.joining(", "));
        String placeholders = headers.stream()
                .map(header -> "?")
                .collect(Collectors.joining(", "));
        return String.format("INSERT INTO %s (%s) VALUES (%s)", tableName, columns, placeholders);
    }

    private void moveFile(Path source, Path targetDir) {
        try {
            Files.move(source,
