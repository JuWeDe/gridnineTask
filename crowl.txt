Беседа № 126: 
Выбрана Ваша роль: Программист

Чтобы настроить Logback на создание отдельного лог-файла для каждого дня, можно использовать следующую конфигурацию:

<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/app.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/app_%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="info">
        <appender-ref ref="FILE" />
    </root>
</configuration>

Рассмотрим основные элементы этой конфигурации:

1. <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">: Определяет файловый аппендер, который будет управлять выводом логов в файл.
2. <file>logs/app.log</file>: Задает базовое имя файла, в данном случае "app.log".
3. <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">: Определяет политику ротации файлов на основе времени.
4. <fileNamePattern>logs/app_%d{yyyy-MM-dd}.log</fileNamePattern>: Устанавливает шаблон для имени файлов. В данном случае, файлы будут иметь имя "app_YYYY-MM-DD.log", где YYYY-MM-DD - дата создания файла.
5. <maxHistory>30</maxHistory>: Задает максимальное количество дней, в течение которых сохраняются старые лог-файлы (30 дней в данном примере).
6. <encoder>: Определяет формат вывода логов внутри файлов.

Когда приложение запускается с этой конфигурацией, Logback будет автоматически создавать новый лог-файл каждый день, сохраняя предыдущие файлы в течение 30 дней.

Например, 1 января будет создан файл "app_2023-01-01.log", 2 января - "app_2023-01-02.log" и так далее. Старые файлы будут удаляться по мере достижения 30-дневного лимита.

Этот подход позволяет поддерживать упорядоченные и компактные лог-файлы, облегчая их анализ и управление.

1. %d - дата и время события. Может иметь дополнительные параметры для форматирования даты и времени, например, %d{yyyy-MM-dd HH:mm:ss.SSS}.
2. %t - имя потока, в котором произошло событие.
3. %p - уровень приоритета события (TRACE, DEBUG, INFO, WARN, ERROR, FATAL).
4. %c - название логгера, которому принадлежит событие. Может использоваться для группирования событий по категориям.
5. %C - название класса, в котором произошло событие.
6. %M - название метода, в котором произошло событие.
7. %L - номер строки кода, в которой произошло событие.
8. %m - само сообщение, которое было записано в лог.
9. %n - символ новой строки (платформозависимый).
10. %F - название файла, в котором произошло событие.
11. %X{key} - значение контекстной переменной с ключом "key".
12. %X - вывод всех контекстных переменных.
13. %caller{depth} - информация о вызывающем методе, с указанием глубины стека (depth).
14. %marker - вывод маркеров, связанных с событием.
