Для реализации прогресс-бара, который будет отображаться в логах и постоянно обновляться, тебе потребуется использовать библиотеку для работы с консолью, которая поддерживает вывод без переноса строки. Одной из таких библиотек является Jansi.

### Шаги:

1. Добавь зависимость Jansi в проект:
   Если используешь Maven, добавь следующую зависимость в pom.xml:

<dependency>
    <groupId>org.fusesource.jansi</groupId>
    <artifactId>jansi</artifactId>
    <version>2.4.0</version>
</dependency>


Если используешь Gradle, то вот пример зависимости:

implementation 'org.fusesource.jansi:jansi:2.4.0'


2. Создай метод для вывода прогресса:
   Выводим прогресс бар, используя символы, такие как [, =, ]. Для этого создадим метод, который будет выводить прогресс от 0 до 100% и обновлять строку каждый раз при вызове.

Пример метода:

import org.fusesource.jansi.AnsiConsole;
import static org.fusesource.jansi.Ansi.*;

public class ProgressBar {
    
    private final int totalSteps;
    private int currentStep = 0;
    
    public ProgressBar(int totalSteps) {
        this.totalSteps = totalSteps;
    }
    
    public void updateProgress() {
        if (currentStep >= totalSteps) return;
        
        // Вычисляем процент выполнения
        double percentComplete = ((double) currentStep / totalSteps) * 100;
        
        // Число символов '=' в прогрессе
        int numEquals = (int) Math.round((percentComplete / 10));
        
        StringBuilder sb = new StringBuilder();
        sb.append("\r["); // \r перемещает курсор в начало строки
        for (int i = 0; i < numEquals; i++) {
            sb.append("=");
        }
        for (int i = numEquals; i < 10; i++) {
            sb.append(" ");
        }
        sb.append("] ").append(String.format("%.1f%%", percentComplete)); // Форматируем процент

        AnsiConsole.out.println(sb.toString());
        
        currentStep++;
    }
}


3. Используем созданный класс в твоем сервисе:
   Теперь можно вызывать этот метод внутри сервиса, где требуется отслеживать прогресс выполнения задачи.

Пример использования:

public class MyService {
    
    public void doLongTask() {
        int totalSteps = 50;
        ProgressBar progressBar = new ProgressBar(totalSteps);
        
        for (int i = 0; i < totalSteps; i++) {
            try {
                Thread.sleep(200); // Имитация длительной операции
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            
            progressBar.updateProgress(); // Обновление прогресса
        }
        
        System.out.println("\nЗадача завершена!");
    }
}


### Как работает:

- Метод updateProgress() вычисляет текущий прогресс и выводит его в виде прогресс-бара, состоящего из символов [, = и пробелов.
- Использование символа \r позволяет переместить курсор в начало строки, благодаря чему строка обновляется, а не добавляется новая.
- В конце каждой итерации выводится новый прогресс, и когда он достигает 100%, выводится сообщение о завершении задачи.

Таким образом, у тебя получится создать прогресс-бар прямо в логах, который будет обновляться в реальном времени.