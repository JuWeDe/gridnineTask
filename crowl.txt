@Scheduled(fixedRate = 10000)
public void watchDirectory() {
    try {
        Path sourcePath = Paths.get(sourceDir);
        if (!Files.exists(sourcePath)) {
            logger.warn("Директория {} не существует", sourceDir);
            return;
        }

        Files.list(sourcePath)
                .filter(Files::isRegularFile)
                .forEach(filePath -> {
                    String fileName = filePath.getFileName().toString();
                    if (fileName.endsWith(".csv") && !processedFiles.contains(fileName)) {
                        logger.info("Обнаружен новый CSV файл: {}", filePath);
                        processedFiles.add(fileName);
                        CompletableFuture.runAsync(() -> processCsvFile(filePath))
                                .exceptionally(ex -> {
                                    logger.error("Ошибка при обработке файла {}", filePath + ExceptionFilter.displayError(ex));
                                    processedFiles.remove(fileName);
                                    return null;
                                });
                    } else if (fileName.endsWith(".zip") && !processedFiles.contains(fileName)) {
                        logger.info("Обнаружен новый ZIP файл: {}", filePath);
                        processedFiles.add(fileName);
                        CompletableFuture.runAsync(() -> processZipFile(filePath))
                                .exceptionally(ex -> {
                                    logger.error("Ошибка при обработке ZIP файла {}", filePath + ExceptionFilter.displayError(ex));
                                    processedFiles.remove(fileName);
                                    return null;
                                });
                    }
                });
    } catch (Exception e) {
        logger.error(ExceptionFilter.displayError(e));
    }
}



zop

private void processZipFile(Path zipFilePath) {
    try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(zipFilePath))) {
        ZipEntry zipEntry;
        while ((zipEntry = zis.getNextEntry()) != null) {
            if (zipEntry.getName().endsWith(".csv")) {
                logger.info("Обрабатываем CSV файл {} из ZIP архива", zipEntry.getName());

                // Чтение содержимого CSV файла из ZIP архива
                Path tempFile = Files.createTempFile(zipEntry.getName(), ".csv");
                Files.copy(zis, tempFile, StandardCopyOption.REPLACE_EXISTING);

                // Обрабатываем CSV файл как обычный
                processCsvFile(tempFile);

                // Удаляем временный файл после обработки
                Files.deleteIfExists(tempFile);
            }
            zis.closeEntry();
        }

        // Перемещаем обработанный ZIP файл в папку успеха или ошибки
        moveFile(zipFilePath, Paths.get(successDir));

    } catch (Exception e) {
        logger.error("Ошибка при обработке ZIP файла {}", zipFilePath + ExceptionFilter.displayError(e));
        moveFile(zipFilePath, Paths.get(errorDir));
    }
}


new iter


private void processZipFile(Path zipFilePath) {
    String fileName = zipFilePath.getFileName().toString();

    try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(zipFilePath))) {
        ZipEntry zipEntry;

        // Извлекаем каждый файл в архиве
        while ((zipEntry = zis.getNextEntry()) != null) {
            String entryName = zipEntry.getName();

            // Обрабатываем только CSV-файлы внутри ZIP
            if (entryName.endsWith(".csv")) {
                logger.info("Извлечение и обработка CSV файла {} из ZIP {}", entryName, fileName);

                Path tempCsvPath = Paths.get(sourceDir, entryName);
                
                // Копируем содержимое файла во временный файл на диске
                try {
                    Files.copy(zis, tempCsvPath, StandardCopyOption.REPLACE_EXISTING);
                    processCsvFile(tempCsvPath); // Обрабатываем CSV как обычный файл
                    Files.delete(tempCsvPath); // Удаляем временный файл после обработки
                } catch (IOException e) {
                    logger.error("Ошибка при извлечении CSV файла {} из ZIP {}: {}", entryName, fileName, ExceptionFilter.displayError(e));
                }
            }
        }

        // По окончании обработки всех CSV перемещаем ZIP в папку успеха
        moveFile(zipFilePath, Paths.get(successDir));
        processedFiles.remove(fileName);
    } catch (Exception e) {
        logger.error("Ошибка при обработке ZIP файла {}: {}", fileName, ExceptionFilter.displayError(e));
        moveFile(zipFilePath, Paths.get(errorDir)); // Перемещаем в папку с ошибками при неудаче
        processedFiles.remove(fileName);
    }
}



new watcehr 

@Scheduled(fixedRate = 10000)
public void watchDirectory() {
    try {
        Path sourcePath = Paths.get(sourceDir);
        if (!Files.exists(sourcePath)) {
            logger.warn("Директория {} не существует", sourceDir);
            return;
        }

        Files.list(sourcePath)
                .filter(Files::isRegularFile)
                .forEach(filePath -> {
                    String fileName = filePath.getFileName().toString();
                    
                    // Если это CSV-файл, обработаем его как обычно
                    if (fileName.endsWith(".csv") && !processedFiles.contains(fileName)) {
                        logger.info("Обнаружен новый CSV файл: {}", filePath);
                        processedFiles.add(fileName);
                        CompletableFuture.runAsync(() -> processCsvFile(filePath))
                                .exceptionally(ex -> {
                                    logger.error("Ошибка при обработке файла {}", filePath + ExceptionFilter.displayError(ex));
                                    processedFiles.remove(fileName);
                                    return null;
                                });
                    }
                    // Если это ZIP-файл
                    else if (fileName.endsWith(".zip") && !processedFiles.contains(fileName)) {
                        logger.info("Обнаружен новый ZIP файл: {}", filePath);
                        processedFiles.add(fileName);
                        CompletableFuture.runAsync(() -> processZipFile(filePath))
                                .exceptionally(ex -> {
                                    logger.error("Ошибка при обработке ZIP файла {}", filePath + ExceptionFilter.displayError(ex));
                                    processedFiles.remove(fileName);
                                    return null;
                                });
                    }
                });
    } catch (Exception e) {
        logger.error(ExceptionFilter.displayError(e));
    }
}


