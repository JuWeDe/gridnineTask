package com.example.demo.services;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.postgresql.copy.CopyManager;
import org.postgresql.core.BaseConnection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import com.example.demo.configurations.ParametersManager;

import java.io.*;
import java.nio.file.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

@Service
public class FileImporterService {

    private static final Logger logger = LoggerFactory.getLogger(FileImporterService.class);

    private final ParametersManager parametersManager;

    @Value("${importer-properties.importerFolder}")
    private String sourceDir;

    @Value("${cleaner-properties.folderPath}")
    private String processedDir;

    public FileImporterService(ParametersManager parametersManager) {
        this.parametersManager = parametersManager;
    }

    @Scheduled(fixedRate = 10000)  // Проверка каждые 10 секунд
    public void watchDirectory() {
        try {
            Path sourcePath = Paths.get(sourceDir);
            if (!Files.exists(sourcePath)) {
                logger.warn("Директория {} не существует", sourceDir);
                return;
            }

            Files.list(sourcePath)
                    .filter(Files::isRegularFile)
                    .forEach(filePath -> {
                        try {
                            logger.info("Обнаружен новый файл: {}", filePath);
                            if (filePath.toString().endsWith(".csv")) {
                                processCsvFile(filePath, processedDir);
                            } else if (filePath.toString().endsWith(".zip")) {
                                processArchive(filePath, processedDir);
                            }
                        } catch (Exception e) {
                            logger.error("Ошибка при обработке файла {}", filePath, e);
                        }
                    });
        } catch (Exception e) {
            logger.error("Ошибка при наблюдении за директорией", e);
        }
    }

    private void processCsvFile(Path csvFilePath, String processedDir) throws Exception {
        String fileName = csvFilePath.getFileName().toString();
        String tableName = getTableNameWithoutExtension(fileName);

        try (Connection connection = getConnectionBasedOnFileName(fileName)) {
            logger.info("Импортируем файл {} в таблицу {}", fileName, tableName);

            char delimiter = detectDelimiter(csvFilePath);
            createTableFromCsv(csvFilePath, tableName, connection, delimiter);
            importCsvToDatabase(csvFilePath, tableName, connection, delimiter);
            moveFile(csvFilePath, Paths.get(processedDir));

            logger.info("Файл {} обработан и перемещен в {}", fileName, processedDir);
        } catch (Exception e) {
            logger.error("Ошибка при обработке файла {}", fileName, e);
        }
    }

    private void processArchive(Path archiveFilePath, String processedDir) throws Exception {
        logger.info("Обрабатываем архив: {}", archiveFilePath);

        try (InputStream fileStream = Files.newInputStream(archiveFilePath)) {
            // Логика для распаковки архива
        }

        moveFile(archiveFilePath, Paths.get(processedDir));
        logger.info("Архив {} обработан и перемещен в {}", archiveFilePath, processedDir);
    }

    private String getTableNameWithoutExtension(String fileName) {
        return fileName.substring(0, fileName.lastIndexOf("."));
    }

    private Connection getConnectionBasedOnFileName(String fileName) throws Exception {
        String[] parts = fileName.split("_");
        String dbUrl = parametersManager.getH2DbUrl();
        String dbUsername = parametersManager.getH2DbUsername();
        String dbPassword = parametersManager.getH2DbPassword();

        if (parts.length > 1 && parts[1].equalsIgnoreCase("ois")) {
            logger.info("Файл {} будет импортирован в базу данных OIS", fileName);
        } else {
            logger.info("Файл {} будет импортирован в базу данных CORE", fileName);
        }
        return DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
    }

    private char detectDelimiter(Path csvFilePath) throws IOException {
        try (BufferedReader reader = Files.newBufferedReader(csvFilePath)) {
            String firstLine = reader.readLine();
            if (firstLine != null) {
                if (firstLine.contains(",")) {
                    return ',';
                } else if (firstLine.contains(";")) {
                    return ';';
                } else if (firstLine.contains("\t")) {
                    return '\t';
                } else {
                    throw new IllegalArgumentException("Не удалось определить разделитель для файла " + csvFilePath);
                }
            }
        }
        throw new IOException("Не удалось прочитать файл " + csvFilePath);
    }

    private void createTableFromCsv(Path csvFilePath, String tableName, Connection connection, char delimiter) throws Exception {
        try (Reader reader = Files.newBufferedReader(csvFilePath);
             CSVParser csvParser = CSVFormat.DEFAULT
                     .withFirstRecordAsHeader()
                     .withDelimiter(delimiter)
                     .parse(reader)) {

            List<String> headers = new ArrayList<>(csvParser.getHeaderMap().keySet());

            StringBuilder createTableQuery = new StringBuilder("CREATE TABLE IF NOT EXISTS ")
                    .append(tableName)
                    .append(" (");

            for (int i = 0; i < headers.size(); i++) {
                createTableQuery.append(headers.get(i).trim()).append(" TEXT");
                if (i < headers.size() - 1) {
                    createTableQuery.append(", ");
                }
            }
            createTableQuery.append(");");

            logger.info("Создание таблицы: {}", createTableQuery.toString());

            try (Statement stmt = connection.createStatement()) {
                stmt.execute(createTableQuery.toString());
            }
        }
    }

    private void importCsvToDatabase(Path csvFilePath, String tableName, Connection connection, char delimiter) throws Exception {
        logger.info("Импорт данных в таблицу {} из файла {}", tableName, csvFilePath);

        CopyManager copyManager = new CopyManager((BaseConnection) connection);

        String copySql = String.format("COPY %s FROM STDIN WITH CSV HEADER DELIMITER '%s'", tableName, delimiter);
        try (BufferedReader bufferedReader = Files.newBufferedReader(csvFilePath)) {
            bufferedReader.readLine();  // Пропускаем заголовок
            copyManager.copyIn(copySql, bufferedReader);
        }
    }

    private void moveFile(Path source, Path targetDir) throws IOException {
        Files.move(source, targetDir.resolve(source.getFileName()), StandardCopyOption.REPLACE_EXISTING);
        logger.info("Файл перемещен в {}", targetDir);
    }
}
