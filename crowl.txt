Для интеграции вашей реализации прогресс-бара в существующий подход с бинами и REST API для выбора режимов, нужно выполнить следующие шаги:

---

### Задачи:
1. **Создать адаптацию вашего сервиса под интерфейс `ProgressBarInterface`.**
2. **Добавить бин для вашей реализации, чтобы его можно было выбирать через REST API.**
3. **Убедиться, что текущая реализация корректно переключается на вашу.**

---

### Обновленный код:

---

#### 1. **Интеграция вашей реализации в `ProgressBarInterface`**

Добавим реализацию вашей логики в сервис, который будет совместим с архитектурой.  

```java
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Service("customProgressBar")
public class CustomProgressBarService implements ProgressBarInterface {

    private final Map<String, ProgressBar> progressBars = new ConcurrentHashMap<>();

    @Override
    public void startProgress(String fileName, long totalRecords, int batchSize) {
        int totalSteps = (int) Math.ceil((double) totalRecords / batchSize); // Количество шагов = количество батчей
        progressBars.put(fileName, new ProgressBar(totalSteps, fileName));
    }

    @Override
    public void updateProgress(String fileName, int stepsCompleted) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.update(stepsCompleted);
        }
    }

    @Override
    public void completeProgress(String fileName) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.complete();
        }
        progressBars.remove(fileName); // Удаляем прогресс-бар после завершения
    }

    private static class ProgressBar {
        private final int totalSteps;
        private final String fileName;
        private int completedSteps;
        private int lastLoggedPercentage = -1; // Последний залогированный процент

        public ProgressBar(int totalSteps, String fileName) {
            this.totalSteps = totalSteps;
            this.fileName = fileName;
            this.completedSteps = 0;
        }

        public synchronized void update(int steps) {
            completedSteps = Math.min(completedSteps + steps, totalSteps);
            printProgress();
        }

        public synchronized void complete() {
            completedSteps = totalSteps;
            printProgress();
            System.out.println(); // Закрываем строку после завершения.
        }

        private void printProgress() {
            int percentage = calculatePercentage();

            if (percentage != lastLoggedPercentage) {
                lastLoggedPercentage = percentage;

                int progressBars = (int) ((double) percentage / 2); // 50 символов = 100%
                StringBuilder progressBar = new StringBuilder("[");
                for (int i = 0; i < 50; i++) {
                    if (i < progressBars) {
                        progressBar.append("█");
                    } else {
                        progressBar.append("░");
                    }
                }
                progressBar.append("] ").append(percentage).append("%");

                log.info("Импорт: {}", progressBar);
            }
        }

        private int calculatePercentage() {
            return (int) ((double) completedSteps / totalSteps * 100);
        }
    }
}
```

---

#### 2. **Обновление `ProgressBarController`**

Обеспечим возможность выбора вашей реализации через REST API.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/progress-bar")
public class ProgressBarController {

    @Autowired
    private ApplicationContext context;

    @Autowired
    private ProgressBarManager progressBarManager;

    @PostMapping("/set")
    public String setProgressBarImplementation(@RequestParam String implementation) {
        try {
            ProgressBarInterface bean = context.getBean(implementation + "ProgressBar", ProgressBarInterface.class);
            progressBarManager.setProgressBarImplementation(bean);
            return "Implementation set to " + implementation;
        } catch (Exception e) {
            return "Invalid implementation. Choose: simple, tongfei, dots, custom.";
        }
    }

    @GetMapping("/current")
    public String getCurrentImplementation() {
        return "Current implementation: " + progressBarManager.getProgressBarImplementation().getClass().getSimpleName();
    }
}
```

Теперь реализация вашей логики доступна под именем `custom`. 

---

#### 3. **Исправление TongfeiProgressBarService**

Убираем стиль и фиксируем логику отображения прогресса по шагам.  

```java
import me.tongfei.progressbar.ProgressBar;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service("tongfeiProgressBar")
public class TongfeiProgressBarService implements ProgressBarInterface {

    private final Map<String, ProgressBar> progressBars = new ConcurrentHashMap<>();

    @Override
    public void startProgress(String fileName, long totalRecords, int batchSize) {
        int totalSteps = (int) Math.ceil((double) totalRecords / batchSize);
        ProgressBar progressBar = new ProgressBar("Импорт " + fileName, totalSteps);
        progressBars.put(fileName, progressBar);
    }

    @Override
    public void updateProgress(String fileName, int stepsCompleted) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.stepBy(stepsCompleted);
        }
    }

    @Override
    public void completeProgress(String fileName) {
        ProgressBar progressBar = progressBars.remove(fileName);
        if (progressBar != null) {
            try (progressBar) {
                progressBar.close();
            }
        }
    }
}
```

---

### Итог:

1. **Добавлена ваша реализация (`CustomProgressBarService`) в виде Spring-бина.**  
2. **REST API обновлено для работы с вашей реализацией (`custom`).**  
3. **Исправлена логика `TongfeiProgressBarService` для корректного отображения прогресса по шагам.**  

Теперь вы можете переключаться между `custom`, `simple`, `tongfei`, `dots` через REST API.