private boolean importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws Exception {
    long totalRecords = fileIteration.getRows(); // Вычисляем количество записей
    int totalSteps = (int) Math.ceil((double) totalRecords / BATCH_SIZE); // Шаги прогресса = батчи

    int stepsCompleted = 0;

    try (Reader reader = Files.newBufferedReader(csvFilePath);
         CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {

        List<String> headers = csvParser.getHeaderNames().stream()
                .flatMap(header -> splitHeader(header.trim()))
                .map(header -> "\"" + header.trim() + "\"")
                .collect(Collectors.toList());
        headers.add("\"iteration_id\"");
        String insertSQL = generateInsertSQL(tableName, headers);
        int iteration_id = getIterationId(csvFilePath);

        try (PreparedStatement preparedStatement = connection.prepareStatement(insertSQL)) {
            List<CSVRecord> records = csvParser.getRecords();
            int count = 0;

            for (CSVRecord record : records) {
                for (int i = 0; i < headers.size(); i++) {
                    String value;
                    if (i == headers.size() - 1) {
                        value = String.valueOf(iteration_id);
                    } else {
                        value = record.get(i);
                    }
                    if (!getIgnoreGaps().equals("active") && (value == null || value.trim().isEmpty())) {
                        description = "Пропуск данных";
                        return false;
                    } else {
                        if (i == headers.size() - 1) {
                            preparedStatement.setInt(i + 1, iteration_id);
                        } else {
                            preparedStatement.setString(i + 1, value);
                        }
                    }
                }

                preparedStatement.addBatch();
                count++;
                if (count % BATCH_SIZE == 0) {
                    preparedStatement.executeBatch();
                    stepsCompleted++;
                    printProgress(stepsCompleted, totalSteps); // Обновляем прогресс
                }
            }

            preparedStatement.executeBatch(); // Выполнение оставшихся записей
            if (count % BATCH_SIZE != 0) {
                stepsCompleted++;
                printProgress(stepsCompleted, totalSteps); // Обновляем для последнего батча
            }
        }
    } catch (Exception e) {
        String message = "importCsvToDatabaseBatch: Ошибка при batch вставке данных в бд -> ";
        log.error(ExceptionFilter.unwindMessages(message, e));
        description = ExceptionFilter.unwindMessages(message, e);
        throw new Exception(message + e.getMessage(), e);
    }

    System.out.println(); // Перенос на новую строку после завершения
    return true;
}

private void printProgress(int stepsCompleted, int totalSteps) {
    int percentage = (int) ((double) stepsCompleted / totalSteps * 100);
    int progressBars = (int) ((double) percentage / 2); // 50 символов = 100%

    StringBuilder progressBar = new StringBuilder("[");
    for (int i = 0; i < 50; i++) {
        if (i < progressBars) {
            progressBar.append("=");
        } else {
            progressBar.append(" ");
        }
    }
    progressBar.append("] ").append(percentage).append("%");

    System.out.print("\r" + progressBar.toString()); // Перезаписываем прогресс в той же строке
}
