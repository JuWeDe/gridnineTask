Беседа № 131: 

Конечно, вот более полный пример реализации, который включает использование Spring Cloud Actuator для управления конфигурацией во время выполнения:

1. Создайте конфигурационный класс ConfigBufferProperties:

@Configuration
@ConfigurationProperties(prefix = "config-buffer")
@RefreshScope
public class ConfigBufferProperties {
    private long delay;

    public long getDelay() {
        return delay;
    }

    public void setDelay(long delay) {
        this.delay = delay;
    }
}

Обратите внимание на аннотацию @RefreshScope, которая позволяет автоматически обновлять значения свойств при вызове /actuator/refresh.

2. Создайте сервис, который использует ConfigBufferProperties:

@Service
public class YourService {
    private final ConfigBufferProperties configBufferProperties;

    public YourService(ConfigBufferProperties configBufferProperties) {
        this.configBufferProperties = configBufferProperties;
    }

    public void doSomething() {
        System.out.println("Executing task with delay: " + configBufferProperties.getDelay() + "ms");
        try {
            Thread.sleep(configBufferProperties.getDelay());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        System.out.println("Task completed");
    }
}

3. Создайте контроллер, который будет предоставлять доступ к конфигурации:

@RestController
@RequestMapping("/config")
public class ConfigController {
    private final ConfigBufferProperties configBufferProperties;

    public ConfigController(ConfigBufferProperties configBufferProperties) {
        this.configBufferProperties = configBufferProperties;
    }

    @GetMapping("/delay")
    public long getDelay() {
        return configBufferProperties.getDelay();
    }

    @PostMapping("/delay")
    public void setDelay(@RequestParam long delay) {
        configBufferProperties.setDelay(delay);
    }
}

4. Создайте файл configBuffer.yaml в папке resources с начальным значением delay:

config-buffer:
  delay: 10000

5. Включите Actuator в application.properties или application.yml:

management:
  endpoints:
    web:
      exposure:
        include: health,info,env,refresh

6. Теперь вы можете запустить ваше Spring Boot приложение:

java -jar your-app.jar

7. Чтобы проверить текущее значение delay, отправьте GET-запрос на /config/delay:

curl http://localhost:8080/config/delay

8. Чтобы изменить значение delay во время выполнения, отправьте POST-запрос на /config/delay с новым значением:

curl -X POST -d "delay=5000" http://localhost:8080/config/delay

9. Чтобы применить изменения, отправьте POST-запрос на /actuator/refresh:

curl -X POST http://localhost:8080/actuator/refresh

После этого ваше приложение будет использовать новое значение delay, которое вы установили.

Этот пример показывает, как вы можете использовать Spring Cloud Actuator для управления конфигурацией во время выполнения, а также предоставляет пользовательский интерфейс для получения и изменения значения delay.

3636 из 16384