import java.util.concurrent.CompletableFuture;
import java.nio.file.*;

@Service
public class FileImporterService {

    private static final Logger logger = LoggerFactory.getLogger(FileImporterService.class);
    private final ParametersManager parametersManager;
    private final String sourceDir;
    private final String processedDir;
    private static final int BATCHSIZE = 1000;

    public FileImporterService(ParametersManager parametersManager,
                               @Value("${importer-properties.importerFolder}") String sourceDir,
                               @Value("${cleaner-properties.folderPath}") String processedDir) {
        this.parametersManager = parametersManager;
        this.sourceDir = sourceDir;
        this.processedDir = processedDir;
    }

    @Scheduled(fixedRate = 10000)
    public void watchDirectory() {
        try {
            Path sourcePath = Paths.get(sourceDir);
            if (!Files.exists(sourcePath)) {
                logger.warn("Директория {} не существует", sourceDir);
                return;
            }

            Files.list(sourcePath)
                    .filter(Files::isRegularFile)
                    .forEach(filePath -> {
                        logger.info("Обнаружен новый файл: {}", filePath);
                        if (filePath.toString().endsWith(".csv")) {
                            // Асинхронно обрабатываем каждый файл с использованием CompletableFuture (без ExecutorService)
                            CompletableFuture.runAsync(() -> processCsvFile(filePath))
                                .exceptionally(ex -> {
                                    logger.error("Ошибка при обработке файла {}", filePath, ex);
                                    return null;
                                });
                        }
                    });
        } catch (Exception e) {
            logger.error("Ошибка при наблюдении за директорией", e);
        }
    }

    private void processCsvFile(Path csvFilePath) {
        String fileName = csvFilePath.getFileName().toString();
        String tableName = getTableNameWithoutExtension(fileName);

        try (Connection connection = getConnectionBasedOnFileName(fileName)) {
            logger.info("Импортируем файл {} в таблицу {}", fileName, tableName);

            char delimiter = detectDelimiter(csvFilePath);
            createTableFromCsv(csvFilePath, tableName, connection, delimiter);
            importCsvToDatabaseBatch(csvFilePath, tableName, connection, delimiter);

            // Перемещаем файл после успешной обработки
            moveFile(csvFilePath, Paths.get(processedDir));

            logger.info("Файл {} обработан и перемещен в {}", fileName, processedDir);
        } catch (Exception e) {
            logger.error("Ошибка при обработке файла {}", fileName, e);
        }
    }

    private void createTableFromCsv(Path csvFilePath, String tableName, Connection connection, char delimiter) throws IOException, SQLException {
        try (Reader reader = Files.newBufferedReader(csvFilePath);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {

            List<String> headers = csvParser.getHeaderNames().stream()
                    .map(header -> "\"" + header.trim().replace("#", "") + "\"")
                    .collect(Collectors.toList());

            String columns = headers.stream()
                    .map(header -> header + " TEXT")
                    .collect(Collectors.joining(", "));

            String createTableSQL = String.format("CREATE TABLE IF NOT EXISTS %s (%s)", tableName, columns);
            try (Statement statement = connection.createStatement()) {
                statement.execute(createTableSQL);
            }
        }
    }

    private void importCsvToDatabaseBatch(Path csvFilePath, String tableName, Connection connection, char delimiter) throws IOException, SQLException {
        try (Reader reader = Files.newBufferedReader(csvFilePath);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withDelimiter(delimiter).withFirstRecordAsHeader())) {

            List<String> headers = csvParser.getHeaderNames().stream()
                    .map(header -> "\"" + header.trim().replace("#", "") + "\"")
                    .collect(Collectors.toList());

            String insertSQL = generateInsertSQL(tableName, headers);
            try (PreparedStatement preparedStatement = connection.prepareStatement(insertSQL)) {
                List<CSVRecord> records = csvParser.getRecords();
                int count = 0;

                for (CSVRecord record : records) {
                    for (int i = 0; i < headers.size(); i++) {
                        String value = record.get(i);
                        if (value == null || value.trim().isEmpty()) {
                            preparedStatement.setNull(i + 1, java.sql.Types.NULL);
                        } else {
                            preparedStatement.setString(i + 1, value);
                        }
                    }
                    preparedStatement.addBatch();
                    count++;

                    if (count % BATCHSIZE == 0) {
                        preparedStatement.executeBatch();
                    }
                }
                preparedStatement.executeBatch();  // Выполняем оставшиеся записи
            }
        }
    }

    private String generateInsertSQL(String tableName, List<String> headers) {
        String columns = headers.stream()
                .map(String::trim)
                .collect(Collectors.joining(", "));

        String placeholders = headers.stream()
                .map(header -> "?")
                .collect(Collectors.joining(", "));

        return String.format("INSERT INTO %s (%s) VALUES (%s)", tableName, columns, placeholders);
    }

    private void moveFile(Path source, Path targetDir) {
        try {
            Files.move(source, targetDir.resolve(source.getFileName()), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            logger.error("Ошибка при перемещении файла {}", source.getFileName(), e);
        }
        logger.info("Файл перемещен в {}", targetDir);
    }
}
