@Slf4j
@Service
public class ProgressBarService {

    private final Map<String, ProgressBar> progressBars = new ConcurrentHashMap<>();

    public void startProgress(String fileName, long totalRecords, int batchSize) {
        int totalSteps = (int) Math.ceil((double) totalRecords / batchSize); // Количество шагов = количество батчей
        progressBars.put(fileName, new ProgressBar(totalSteps, fileName));
    }

    public void updateProgress(String fileName, int stepsCompleted) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.update(stepsCompleted);
        }
    }

    public void completeProgress(String fileName) {
        ProgressBar progressBar = progressBars.get(fileName);
        if (progressBar != null) {
            progressBar.complete();
        }
        progressBars.remove(fileName); // Удаляем прогресс-бар после завершения
    }

    private static class ProgressBar {
        private static final int[] FIXED_PERCENTAGES = {20, 40, 60, 80, 100}; // Шаги прогресса
        private final int totalSteps;
        private final String fileName;
        private int completedSteps;
        private int lastLoggedPercentage = -1; // Последний залогированный шаг

        public ProgressBar(int totalSteps, String fileName) {
            this.totalSteps = totalSteps;
            this.fileName = fileName;
            this.completedSteps = 0;
        }

        public synchronized void update(int steps) {
            completedSteps = Math.min(completedSteps + steps, totalSteps);
            printProgress();
        }

        public synchronized void complete() {
            completedSteps = totalSteps;
            printProgress();
            System.out.println(); // Закрываем строку после завершения.
        }

        private void printProgress() {
            int percentage = calculatePercentage();

            // Проверяем, прошли ли мы пороговый шаг (20%, 40%, ...).
            if (shouldLogProgress(percentage)) {
                lastLoggedPercentage = percentage;

                int filledBars = (percentage / 20); // Всего 5 символов
                StringBuilder progressBar = new StringBuilder("[");
                for (int i = 0; i < 5; i++) {
                    if (i < filledBars) {
                        progressBar.append("█");
                    } else {
                        progressBar.append("░");
                    }
                }
                progressBar.append("] ").append(percentage).append("%");

                log.info("Импорт файла {}: {}", fileName, progressBar);
            }
        }

        private int calculatePercentage() {
            return (int) ((double) completedSteps / totalSteps * 100);
        }

        private boolean shouldLogProgress(int percentage) {
            // Логируем только на фиксированных уровнях (20%, 40%, 60%, ...).
            for (int fixed : FIXED_PERCENTAGES) {
                if (percentage >= fixed && lastLoggedPercentage < fixed) {
                    return true;
                }
            }
            return false;
        }
    }
}
